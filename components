
import React, { useState, useEffect, useMemo } from 'react';
import { UserRole } from '../types';
import FaceScan from './FaceScan';
import AnimatedElement from './AnimatedElement';

interface SignupScreenProps {
  onSignup: (details: { name: string, email: string, role: UserRole, password: string, childEmail?: string, registeredPhotoUrl: string }) => void;
  onSwitchToLogin: () => void;
  onSocialLogin: (role: UserRole) => void;
  error: string | null;
}

const PasswordRequirement: React.FC<{ isValid: boolean; text: string }> = ({ isValid, text }) => (
    <li className={`flex items-center gap-2 text-sm transition-colors ${isValid ? 'text-green-400' : 'text-gray-400'}`}>
        {isValid ? (
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"></path></svg>
        ) : (
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd"></path></svg>
        )}
        <span>{text}</span>
    </li>
);

const SignupScreen: React.FC<SignupScreenProps> = ({ onSignup, onSwitchToLogin, onSocialLogin, error }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [role, setRole] = useState<UserRole>(UserRole.Student);
  const [childEmail, setChildEmail] = useState('');
  const [isFaceScanVisible, setIsFaceScanVisible] = useState(false);

  const passwordValidation = useMemo(() => {
    const hasMinLength = password.length >= 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasSpecialChar = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+/.test(password);
    
    const allValid = hasMinLength && hasUppercase && hasLowercase && hasNumber && hasSpecialChar;

    return {
      hasMinLength,
      hasUppercase,
      hasLowercase,
      hasNumber,
      hasSpecialChar,
      allValid,
    };
  }, [password]);


  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!passwordValidation.allValid) {
        alert("Please ensure your password meets all the security requirements.");
        return;
    }
    if (name && email && password) {
      if (role === UserRole.Parent && !childEmail) {
        // Simple validation, App.tsx handles the more robust check
        alert("Please enter your child's email address.");
        return;
      }
      setIsFaceScanVisible(true);
    }
  };
  
  const handleFaceScanSuccess = (imageDataUrl: string) => {
    setIsFaceScanVisible(false);
    onSignup({ name, email, role, password, childEmail, registeredPhotoUrl: imageDataUrl });
  }

  const SocialButton: React.FC<{ onClick: () => void; icon: React.ReactElement; label: string }> = ({ onClick, icon, label }) => (
    <button onClick={onClick} className="w-full flex items-center justify-center gap-3 py-2.5 px-4 border border-gray-600 rounded-lg hover:bg-gray-700/50 transition-colors duration-200">
      {icon}
      <span className="text-sm font-medium text-gray-200">{label}</span>
    </button>
  );

  return (
    <>
      {isFaceScanVisible && (
        <FaceScan 
            title="Signup Verification"
            onClose={() => setIsFaceScanVisible(false)}
            onSuccess={handleFaceScanSuccess}
            mode="signup"
        />
      )}
      <div className="flex items-center justify-center min-h-screen p-4">
        <AnimatedElement className="w-full max-w-md">
          <div className="p-8 space-y-6 bg-gray-800/50 backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-700">
            <div className="text-center space-y-2">
              <div className="flex justify-center items-center gap-2">
                <svg className="h-10 w-10 text-indigo-400" width="24" height="24" viewBox="0 0 24 24" strokeWidth="2" stroke="currentColor" fill="none" strokeLinecap="round" strokeLinejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0" /><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0" /><line x1="3" y1="6" x2="3" y2="19" /><line x1="12" y1="6" x2="12" y2="19" /><line x1="21" y1="6" x2="21" y2="19" /></svg>
                <h1 className="text-3xl font-bold text-white tracking-tight">Smart Curriculum</h1>
              </div>
              <h2 className="text-2xl font-bold text-white">Create your account</h2>
              <p className="text-gray-400">
                Already have an account?{' '}
                <button onClick={onSwitchToLogin} className="font-medium text-indigo-400 hover:text-indigo-500">
                  Log in
                </button>
              </p>
            </div>

            <form className="space-y-4" onSubmit={handleSubmit}>
              <div>
                <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="name">Full Name</label>
                <input id="name" type="text" value={name} onChange={(e) => setName(e.target.value)} placeholder="Full Name" required className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors" />
              </div>
              <div>
                <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="email">Email</label>
                <input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email address" required className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors" />
              </div>
              <div>
                <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="password">Password</label>
                <input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" required className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors" />
              </div>
               {password && (
                 <div className="p-3 bg-gray-900/50 rounded-lg">
                    <ul className="space-y-1">
                        <PasswordRequirement isValid={passwordValidation.hasMinLength} text="At least 8 characters" />
                        <PasswordRequirement isValid={passwordValidation.hasLowercase} text="A lowercase letter (a-z)" />
                        <PasswordRequirement isValid={passwordValidation.hasUppercase} text="An uppercase letter (A-Z)" />
                        <PasswordRequirement isValid={passwordValidation.hasNumber} text="A number (0-9)" />
                        <PasswordRequirement isValid={passwordValidation.hasSpecialChar} text="A special character (!@#$...)" />
                    </ul>
                 </div>
               )}
              <div>
                 <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="role">I am a</label>
                 <select id="role" value={role} onChange={(e) => setRole(e.target.value as UserRole)} className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors">
                    <option value={UserRole.Student}>Student</option>
                    <option value={UserRole.Teacher}>Teacher</option>
                    <option value={UserRole.Parent}>Parent</option>
                 </select>
              </div>
              {role === UserRole.Parent && (
                <div>
                  <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="childEmail">Child's Email</label>
                  <input id="childEmail" type="email" value={childEmail} onChange={(e) => setChildEmail(e.target.value)} placeholder="Your Child's Email Address" required className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors" />
                </div>
              )}
              {error && <p className="text-sm text-red-400 text-center">{error}</p>}
              <button type="submit" 
                disabled={!passwordValidation.allValid}
                className="w-full px-6 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-gray-900 transition-all duration-300 ease-in-out disabled:bg-gray-600 disabled:cursor-not-allowed disabled:scale-100 transform hover:scale-105"
              >
                Create Account & Scan Face
              </button>
            </form>

            <div className="relative">
                <div className="absolute inset-0 flex items-center"><div className="w-full border-t border-gray-600" /></div>
                <div className="relative flex justify-center text-sm"><span className="px-2 bg-gray-800 text-gray-400">Or continue with</span></div>
            </div>
            
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                <SocialButton onClick={() => onSocialLogin(UserRole.Student)} icon={<svg className="w-5 h-5" viewBox="0 0 48 48"><path fill="#FFC107" d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8c-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C12.955 4 4 12.955 4 24s8.955 20 20 20s20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"></path><path fill="#FF3D00" d="M6.306 14.691l6.571 4.819C14.655 15.108 18.961 12 24 12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C16.318 4 9.656 8.337 6.306 14.691z"></path><path fill="#4CAF50" d="M24 44c5.166 0 9.86-1.977 13.409-5.192l-6.19-5.238C29.211 35.091 26.715 36 24 36c-5.222 0-9.618-3.319-11.283-7.946l-6.522 5.025C9.505 39.556 16.227 44 24 44z"></path><path fill="#1976D2" d="M43.611 20.083H42V20H24v8h11.303c-.792 2.237-2.231 4.166-4.087 5.574l6.19 5.238C42.012 36.426 44 30.865 44 24c0-1.341-.138-2.65-.389-3.917z"></path></svg>} label="Google" />
                <SocialButton onClick={() => onSocialLogin(UserRole.Parent)} icon={<svg className="w-5 h-5 text-white" viewBox="0 0 23 23"><path fill="currentColor" d="M1 1h10v10H1V1zm11 0h10v10H12V1zM1 12h10v10H1V12zm11 0h10v10H12V12z"></path></svg>} label="Microsoft" />
                <SocialButton onClick={() => onSocialLogin(UserRole.Teacher)} icon={<svg className="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path></svg>} label="Mobile" />
            </div>
          </div>
        </AnimatedElement>
      </div>
    </>
  );
};

export default SignupScreen;
import React, { useState, useMemo } from 'react';
import { LeaveApplication } from '../types';

interface LeaveRequestManagerProps {
  leaveApplications: LeaveApplication[];
  onUpdateLeaveStatus: (applicationId: string, status: 'Approved' | 'Rejected', teacherComment?: string) => void;
}

const LeaveRequestManager: React.FC<LeaveRequestManagerProps> = ({ leaveApplications, onUpdateLeaveStatus }) => {
  const [activeTab, setActiveTab] = useState<'Pending' | 'All'>('Pending');

  const filteredApplications = useMemo(() => {
    const sorted = [...leaveApplications].sort((a, b) => new Date(b.applicationDate).getTime() - new Date(a.applicationDate).getTime());
    if (activeTab === 'Pending') {
      return sorted.filter(app => app.status === 'Pending');
    }
    return sorted;
  }, [leaveApplications, activeTab]);

  const getStatusChipClass = (status: LeaveApplication['status']) => {
    switch (status) {
      case 'Approved': return 'bg-green-600/50 text-green-200';
      case 'Rejected': return 'bg-red-600/50 text-red-200';
      case 'Pending': return 'bg-yellow-600/50 text-yellow-200';
      default: return 'bg-gray-600/50 text-gray-200';
    }
  };

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h2 className="text-xl font-semibold mb-4 text-indigo-400">Manage Leave Requests</h2>
      
      <div className="border-b border-gray-700 mb-4">
        <nav className="-mb-px flex space-x-6" aria-label="Tabs">
          <button
            onClick={() => setActiveTab('Pending')}
            className={`tab-button py-2 px-1 font-medium text-sm ${activeTab === 'Pending' ? 'text-white border-b-2 border-indigo-500' : 'text-gray-400 hover:text-white'}`}
          >
            Pending Requests
          </button>
          <button
            onClick={() => setActiveTab('All')}
            className={`tab-button py-2 px-1 font-medium text-sm ${activeTab === 'All' ? 'text-white border-b-2 border-indigo-500' : 'text-gray-400 hover:text-white'}`}
          >
            All Requests
          </button>
        </nav>
      </div>

      <div className="overflow-x-auto">
        <table className="w-full text-left">
          <thead className="border-b border-gray-600">
            <tr>
              <th className="p-3">Student</th>
              <th className="p-3">Dates</th>
              <th className="p-3">Reason</th>
              <th className="p-3">Status / Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredApplications.length > 0 ? filteredApplications.map(app => (
              <tr key={app.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                <td className="p-3 align-top">
                  <div className="font-medium text-white">{app.studentName}</div>
                  <div className="text-xs text-gray-400">{app.studentRollNumber}</div>
                </td>
                <td className="p-3 align-top text-sm text-gray-300">
                  {new Date(app.startDate).toLocaleDateString()} - {new Date(app.endDate).toLocaleDateString()}
                </td>
                <td className="p-3 align-top">
                  <p className="text-sm text-gray-300 max-w-xs">{app.reason}</p>
                   {app.documentUrl && (
                     <a href={app.documentUrl} target="_blank" rel="noopener noreferrer" className="mt-1 inline-block text-sm text-indigo-400 hover:underline">View Document</a>
                 )}
                </td>
                <td className="p-3 align-top">
                  {app.status === 'Pending' ? (
                    <div className="flex flex-col sm:flex-row gap-2">
                      <button onClick={() => onUpdateLeaveStatus(app.id, 'Approved')} className="px-3 py-1.5 text-xs font-semibold text-white bg-green-600 rounded-md hover:bg-green-700">Approve</button>
                      <button onClick={() => onUpdateLeaveStatus(app.id, 'Rejected')} className="px-3 py-1.5 text-xs font-semibold text-white bg-red-600 rounded-md hover:bg-red-700">Reject</button>
                    </div>
                  ) : (
                    <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getStatusChipClass(app.status)}`}>
                      {app.status}
                    </span>
                  )}
                </td>
              </tr>
            )) : (
              <tr>
                <td colSpan={4} className="text-center p-8 text-gray-400">
                  {activeTab === 'Pending' ? 'No pending leave requests.' : 'No leave applications found.'}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default LeaveRequestManager;
import React, { useState, useMemo } from 'react';
import { Student, LeaveApplication } from '../types';
import Modal from './Modal';

interface LeaveApplicationManagerProps {
  student: Student;
  applications: LeaveApplication[];
  onApplyForLeave: (applicationData: Omit<LeaveApplication, 'id' | 'status' | 'applicationDate'>) => void;
}

const LeaveApplicationManager: React.FC<LeaveApplicationManagerProps> = ({ student, applications, onApplyForLeave }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    startDate: '',
    endDate: '',
    reason: '',
    documentUrl: '',
  });
  const [error, setError] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    if (error) setError('');
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (loadEvent) => {
        setFormData({ ...formData, documentUrl: loadEvent.target?.result as string });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.startDate || !formData.endDate || !formData.reason.trim()) {
      setError('Start date, end date, and reason are required.');
      return;
    }
    if (new Date(formData.startDate) > new Date(formData.endDate)) {
        setError('Start date cannot be after the end date.');
        return;
    }

    onApplyForLeave({
      studentId: student.id,
      studentName: student.name,
      studentRollNumber: student.rollNumber,
      ...formData
    });
    setIsModalOpen(false);
  };
  
  const getStatusChipClass = (status: LeaveApplication['status']) => {
    switch (status) {
      case 'Approved': return 'bg-green-600/50 text-green-200';
      case 'Rejected': return 'bg-red-600/50 text-red-200';
      case 'Pending': return 'bg-yellow-600/50 text-yellow-200';
      default: return 'bg-gray-600/50 text-gray-200';
    }
  };
  
  const sortedApplications = useMemo(() => {
    return [...applications].sort((a, b) => new Date(b.applicationDate).getTime() - new Date(a.applicationDate).getTime());
  }, [applications]);

  return (
    <>
      {isModalOpen && (
        <Modal title="Apply for Leave" onClose={() => setIsModalOpen(false)}>
          <form onSubmit={handleSubmit} className="p-2 space-y-4">
             <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                    <label htmlFor="startDate" className="block text-sm font-medium text-gray-300 mb-1">Start Date</label>
                    <input type="date" id="startDate" name="startDate" value={formData.startDate} onChange={handleInputChange} required className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
                </div>
                <div>
                    <label htmlFor="endDate" className="block text-sm font-medium text-gray-300 mb-1">End Date</label>
                    <input type="date" id="endDate" name="endDate" value={formData.endDate} onChange={handleInputChange} required className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
                </div>
            </div>
            <div>
              <label htmlFor="reason" className="block text-sm font-medium text-gray-300 mb-1">Reason for Leave</label>
              <textarea id="reason" name="reason" value={formData.reason} onChange={handleInputChange} rows={4} required className="w-full px-3 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" placeholder="e.g., Family function, medical appointment..."></textarea>
            </div>
             <div>
              <label htmlFor="document" className="block text-sm font-medium text-gray-300 mb-1">Supporting Document (Optional)</label>
              <input type="file" id="document" name="document" onChange={handleFileChange} accept="image/*,.pdf" className="w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-600/50 file:text-indigo-200 hover:file:bg-indigo-700/50" />
            </div>
            {error && <p className="text-sm text-red-400 text-center">{error}</p>}
            <div className="flex justify-end gap-4 pt-4">
              <button type="button" onClick={() => setIsModalOpen(false)} className="px-6 py-2 bg-gray-600 rounded-lg hover:bg-gray-700">Cancel</button>
              <button type="submit" className="px-6 py-2 bg-green-600 rounded-lg hover:bg-green-700">Submit Application</button>
            </div>
          </form>
        </Modal>
      )}

      <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
        <div className="flex flex-wrap justify-between items-center gap-4 mb-6">
          <h2 className="text-2xl font-bold text-indigo-400">My Leave Applications</h2>
          <button onClick={() => { setIsModalOpen(true); setError(''); setFormData({startDate: '', endDate: '', reason: '', documentUrl: ''}) }} className="px-4 py-2 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105">
            + Apply for New Leave
          </button>
        </div>
        
        {sortedApplications.length > 0 ? (
          <div className="space-y-4">
            {sortedApplications.map(app => (
              <div key={app.id} className="p-4 bg-gray-900/50 rounded-lg border border-gray-700">
                <div className="flex flex-wrap justify-between items-start gap-2">
                    <div>
                        <p className="font-semibold text-white">
                            Leave from {new Date(app.startDate).toLocaleDateString()} to {new Date(app.endDate).toLocaleDateString()}
                        </p>
                        <p className="text-sm text-gray-400">Applied on: {new Date(app.applicationDate).toLocaleDateString()}</p>
                    </div>
                    <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getStatusChipClass(app.status)}`}>
                        {app.status}
                    </span>
                </div>
                 <p className="mt-3 text-sm text-gray-300 border-l-2 border-gray-600 pl-3"><strong>Reason:</strong> {app.reason}</p>
                 {app.documentUrl && (
                     <a href={app.documentUrl} target="_blank" rel="noopener noreferrer" className="mt-2 inline-block text-sm text-indigo-400 hover:underline">View Attached Document</a>
                 )}
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-10 text-gray-400">
            <p>You have not submitted any leave applications yet.</p>
          </div>
        )}
      </div>
    </>
  );
};

export default LeaveApplicationManager;
import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { User, Student, LearningPath, LeaveApplication } from '../types';
import Header from './Header';
import Chatbot from './Chatbot';
import RollAccountView from './RollAccountView';
import StudentLearningPlanner from './StudentLearningPlanner';
import FileManager from './FileManager';
import AttendanceCheckinFlow from './AttendanceCheckinFlow';
import PerformancePredictor from './PerformancePredictor';
import SharedLinksView from './SharedLinksView';
import AnimatedElement from './AnimatedElement';
import ProgressTracker from './ProgressTracker';
import { isWithinGeofence } from '../utils/geolocation';
import Spinner from './Spinner';
import AccountSettings from './AccountSettings';
import LeaveApplicationManager from './LeaveApplicationManager';

interface StudentDashboardProps {
  user: User;
  onLogout: () => void;
  studentData: Student;
  onPlanUpdate: (learningPath: LearningPath) => void;
  onUpdateUser: (user: User) => void;
  leaveApplications: LeaveApplication[];
  onApplyForLeave: (applicationData: Omit<LeaveApplication, 'id' | 'status' | 'applicationDate'>) => void;
}

type ReadinessStatus = 'idle' | 'checking' | 'ready' | 'geofence_fail' | 'permission_fail' | 'error';

const StudentDashboard: React.FC<StudentDashboardProps> = ({ user, onLogout, studentData, onPlanUpdate, onUpdateUser, leaveApplications, onApplyForLeave }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [isCheckinFlowOpen, setIsCheckinFlowOpen] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  // New states for the "Ready for Class" feature
  const [readinessStatus, setReadinessStatus] = useState<ReadinessStatus>('idle');
  const [readinessMessage, setReadinessMessage] = useState('Verify your location to enable attendance check-in.');
  const [verifiedLocation, setVerifiedLocation] = useState<GeolocationCoordinates | null>(null);

  const totalClasses = studentData.attendance.length;
  const presentClasses = studentData.attendance.filter(a => a.status === 'Present').length;
  const attendancePercentage = totalClasses > 0 ? (presentClasses / totalClasses) * 100 : 100;

  const handleLocationCheck = useCallback(() => {
    setReadinessStatus('checking');
    setReadinessMessage('Getting your location... Please wait.');
    setVerifiedLocation(null);

    if (!navigator.geolocation) {
      setReadinessStatus('error');
      setReadinessMessage('Geolocation is not supported by your browser.');
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        console.log("User location:", position.coords);
        if (isWithinGeofence(position.coords)) {
          setReadinessStatus('ready');
          setReadinessMessage('Location Verified! You are inside the campus.');
          setVerifiedLocation(position.coords);
        } else {
          setReadinessStatus('geofence_fail');
          setReadinessMessage('You seem to be outside the campus boundary. Please move inside and try again.');
        }
      },
      (error) => {
        console.error("Geolocation error:", error);
        let userMessage = 'Could not get your location. ';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            setReadinessStatus('permission_fail');
            userMessage += "Please enable location permissions for this site in your browser settings.";
            break;
          case error.POSITION_UNAVAILABLE:
            setReadinessStatus('error');
            userMessage += "Location information is unavailable. Try connecting to a different network.";
            break;
          case error.TIMEOUT:
            setReadinessStatus('error');
            userMessage += "The request timed out. Please check your internet connection and try again.";
            break;
          default:
            setReadinessStatus('error');
            userMessage += "An unknown error occurred.";
            break;
        }
        setReadinessMessage(userMessage);
      },
      { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
    );
  }, []);

  useEffect(() => {
    if (activeTab === 'overview') {
      handleLocationCheck();
    }
  }, [activeTab, handleLocationCheck]);


  const chatbotContext = useMemo(() => {
    let context = `User is a student named ${user.name}. They are viewing their ${activeTab} tab.`;

    if (studentData.learningPath) {
      const planString = studentData.learningPath.daily_plan
        .map(day => `- ${day.day}: ${day.focus_topic} (${day.learning_activity})`)
        .join('\n');
      
      context += `\n\nHere is the student's current learning plan:\nSummary: "${studentData.learningPath.overall_summary}"\nSchedule:\n${planString}`;
    } else {
      context += ' The student does not have an active AI-generated learning plan yet.';
    }
    
    return context;
  }, [user.name, activeTab, studentData.learningPath]);
  
  const ReadinessStatusIcon: React.FC = () => {
    switch (readinessStatus) {
        case 'checking': return <Spinner />;
        case 'ready': return <svg className="w-12 h-12 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
        case 'geofence_fail':
        case 'permission_fail':
        case 'error':
             return <svg className="w-12 h-12 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
        default:
             return <svg className="w-12 h-12 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;
    }
  };

  const getReadinessMessageColor = () => {
     switch (readinessStatus) {
        case 'ready': return 'text-green-300';
        case 'geofence_fail':
        case 'permission_fail':
        case 'error': return 'text-red-300';
        default: return 'text-gray-400';
     }
  }

  const renderContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <AnimatedElement>
                <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700 interactive-card">
                  <h3 className="text-lg font-semibold text-indigo-400">Attendance Summary</h3>
                  <p className="text-4xl font-bold mt-2">{attendancePercentage.toFixed(1)}%</p>
                  <p className="text-gray-400">{presentClasses} / {totalClasses} classes attended</p>
                </div>
              </AnimatedElement>
              <AnimatedElement delay={100}>
                <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700 flex flex-col items-center justify-center interactive-card text-center min-h-[290px]">
                  <ReadinessStatusIcon />
                  <h3 className="text-xl font-bold text-white mt-4 mb-2">Ready for Class?</h3>
                  <p className={`mb-4 text-sm min-h-[40px] ${getReadinessMessageColor()}`}>{readinessMessage}</p>
                  
                  {readinessStatus !== 'ready' && (
                    <>
                        <button
                          onClick={handleLocationCheck}
                          disabled={readinessStatus === 'checking'}
                          className="px-6 py-2 font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105 disabled:bg-indigo-800 disabled:scale-100 disabled:cursor-not-allowed flex items-center justify-center w-full max-w-xs"
                        >
                          {readinessStatus === 'checking' ? 'Checking...' : "I'm on Campus, Check My Location"}
                        </button>
                        <div className="mt-4 text-xs text-gray-500 max-w-xs">
                            <strong>Tips:</strong> For best results, connect to campus Wi-Fi and enable high-accuracy location.
                        </div>
                    </>
                  )}
                </div>
              </AnimatedElement>
            </div>
             {readinessStatus === 'ready' && (
                 <AnimatedElement delay={200} className="mt-6">
                    <div className="bg-gray-800/50 p-6 rounded-xl border border-green-500/50 flex flex-col items-center justify-center interactive-card">
                        <svg className="w-16 h-16 text-green-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                        <h3 className="text-xl font-bold text-white mb-2">You're All Set!</h3>
                        <p className="text-gray-400 mb-4 text-center text-sm">Your on-campus location is verified. Proceed to mark your attendance.</p>
                        <button 
                          onClick={() => setIsCheckinFlowOpen(true)}
                          className="px-6 py-3 text-lg font-semibold text-white bg-green-600 rounded-lg hover:bg-green-700 transition-transform transform hover:scale-105"
                        >
                          Mark My Attendance
                        </button>
                    </div>
                </AnimatedElement>
            )}
            <AnimatedElement delay={readinessStatus === 'ready' ? 300 : 200} className="mt-6">
              <PerformancePredictor student={studentData} />
            </AnimatedElement>
          </div>
        );
      case 'progress':
        return <AnimatedElement><ProgressTracker student={studentData} /></AnimatedElement>;
      case 'attendance':
        return <AnimatedElement><RollAccountView attendance={studentData.attendance} /></AnimatedElement>;
      case 'leave':
        return <AnimatedElement><LeaveApplicationManager 
            student={studentData}
            applications={leaveApplications}
            onApplyForLeave={onApplyForLeave}
        /></AnimatedElement>;
      case 'learning':
        return <AnimatedElement><StudentLearningPlanner 
            student={studentData} 
            onPlanGenerated={onPlanUpdate}
        /></AnimatedElement>;
      case 'files':
        return <AnimatedElement><FileManager mode="student" /></AnimatedElement>;
      case 'links':
        return <AnimatedElement><SharedLinksView /></AnimatedElement>;
      default:
        return null;
    }
  };

  return (
    <>
      <Header user={user} onLogout={onLogout} onOpenSettings={() => setIsSettingsOpen(true)} />
       {isSettingsOpen && (
        <AccountSettings
            user={user}
            onUpdateUser={onUpdateUser}
            onClose={() => setIsSettingsOpen(false)}
        />
      )}
       {isCheckinFlowOpen && verifiedLocation && (
        <AttendanceCheckinFlow 
            user={user} 
            onClose={() => setIsCheckinFlowOpen(false)} 
            location={verifiedLocation} 
        />
       )}
      <main className="container mx-auto p-4 sm:p-6 lg:p-8">
        <AnimatedElement>
          <h1 className="text-3xl font-bold text-white mb-2">Student Dashboard</h1>
          <p className="text-gray-400 mb-6">Welcome back, {user.name}!</p>
        </AnimatedElement>
        
        <AnimatedElement className="border-b border-gray-700 mb-6" delay={100}>
          <nav className="-mb-px flex space-x-6" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('overview')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'overview' ? 'active' : ''}`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('progress')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'progress' ? 'active' : ''}`}
            >
              Progress Tracker
            </button>
            <button
              onClick={() => setActiveTab('leave')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'leave' ? 'active' : ''}`}
            >
              Leave Applications
            </button>
            <button
              onClick={() => setActiveTab('attendance')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'attendance' ? 'active' : ''}`}
            >
              Full Attendance Record
            </button>
            <button
              onClick={() => setActiveTab('learning')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'learning' ? 'active' : ''}`}
            >
                AI Learning Planner
            </button>
            <button
              onClick={() => setActiveTab('files')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'files' ? 'active' : ''}`}
            >
                Files
            </button>
            <button
              onClick={() => setActiveTab('links')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'links' ? 'active' : ''}`}
            >
                Important Links
            </button>
          </nav>
        </AnimatedElement>

        {renderContent()}
      </main>
      
      <Chatbot context={chatbotContext} />
    </>
  );
};

export default StudentDashboard;
import React, { useState, useMemo } from 'react';
import { User, Student, LearningPath, AttendanceRecord, LeaveApplication } from '../types';
import Header from './Header';
import StudentDetailsView from './StudentDetailsView';
import AttendanceCamera from './AttendanceCamera';
import QRCodeScanner from './QRCodeScanner';
import Chatbot from './Chatbot';
import FileManager from './FileManager';
import LinkManager from './LinkManager';
import AnimatedElement from './AnimatedElement';
import StudentAccessManager from './StudentAccessManager';
import AccountSettings from './AccountSettings';
import LeaveRequestManager from './LeaveRequestManager';

const ALL_SUBJECTS = [
    'Data Structures', 
    'Algorithms', 
    'Computer Graphics (CG)',
    'District Mathematics Structure (DMS)',
    'Open Elective-IQM',
    'Circuit Theory',
    'Civil GIS',
    'Surveying'
];

interface TeacherDashboardProps {
  user: User;
  onLogout: () => void;
  students: Student[];
  setStudents: (students: Student[]) => void;
  onUpdateUser: (user: User) => void;
  leaveApplications: LeaveApplication[];
  onUpdateLeaveStatus: (applicationId: string, status: 'Approved' | 'Rejected', teacherComment?: string) => void;
}

const TeacherDashboard: React.FC<TeacherDashboardProps> = ({ user, onLogout, students, setStudents, onUpdateUser, leaveApplications, onUpdateLeaveStatus }) => {
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [isCameraOpen, setIsCameraOpen] = useState(false);
  const [isQRScannerOpen, setIsQRScannerOpen] = useState(false);
  const [selectedSubject, setSelectedSubject] = useState<string>(ALL_SUBJECTS[0]);
  const [activeTab, setActiveTab] = useState<'daily' | 'records' | 'files' | 'links' | 'overview' | 'leave'>('daily');
  const [scanStatus, setScanStatus] = useState<{ type: 'success' | 'error', message: string } | null>(null);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  const [startDate, setStartDate] = useState<string>(() => {
    const date = new Date();
    date.setDate(date.getDate() - 7);
    return date.toISOString().split('T')[0];
  });
  const [endDate, setEndDate] = useState<string>(new Date().toISOString().split('T')[0]);

  const today = new Date().toISOString().split('T')[0];

  const handleAttendanceChange = (studentId: string, status: 'Present' | 'Absent' | 'Late') => {
    const studentToUpdate = students.find(s => s.id === studentId);
    if (!studentToUpdate) return;
    
    const existingRecordIndex = studentToUpdate.attendance.findIndex(
        record => record.date === today && record.subject === selectedSubject
    );

    let updatedAttendance = [...studentToUpdate.attendance];

    const newRecord: AttendanceRecord = {
        date: today,
        subject: selectedSubject,
        teacherName: user.name,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        status: status,
    };

    if (existingRecordIndex > -1) {
        updatedAttendance[existingRecordIndex] = newRecord;
    } else {
        updatedAttendance.push(newRecord);
    }

    const updatedStudent = { ...studentToUpdate, attendance: updatedAttendance };
    setStudents(students.map(s => s.id === studentId ? updatedStudent : s));
  };
  
  const handleBulkAttendanceUpdate = (updatedAttendanceStatus: { [studentId: string]: 'Present' | 'Absent' }) => {
    const studentIdsToUpdate = Object.keys(updatedAttendanceStatus);

    const newStudents = students.map(student => {
      if (studentIdsToUpdate.includes(student.id)) {
        const status = updatedAttendanceStatus[student.id];
        const existingRecordIndex = student.attendance.findIndex(
          a => a.date === today && a.subject === selectedSubject
        );

        let updatedAttendanceList = [...student.attendance];
        const newRecord: AttendanceRecord = {
          date: today,
          subject: selectedSubject,
          teacherName: user.name,
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
          status: status,
        };

        if (existingRecordIndex > -1) {
          updatedAttendanceList[existingRecordIndex] = newRecord;
        } else {
          updatedAttendanceList.push(newRecord);
        }
        return { ...student, attendance: updatedAttendanceList };
      }
      return student;
    });
    setStudents(newStudents);
    setIsCameraOpen(false);
  };
  
  const handleQRScanSuccess = (studentId: string) => {
    setIsQRScannerOpen(false); // Close modal on success
    const student = students.find(s => s.id === studentId);
    if (student) {
        handleAttendanceChange(studentId, 'Present');
        setScanStatus({ type: 'success', message: `✅ Attendance for ${student.name} marked successfully!` });
    } else {
        setScanStatus({ type: 'error', message: `❌ Student with ID ${studentId} not found.` });
    }
    setTimeout(() => setScanStatus(null), 5000);
  };

  const handlePlanGenerated = (learningPath: LearningPath) => {
    if (!selectedStudent) return;
    const updatedStudents = students.map(s =>
      s.id === selectedStudent.id ? { ...s, learningPath } : s
    );
    setStudents(updatedStudents);
    setSelectedStudent(prev => prev ? { ...prev, learningPath } : null);
  };

  const getAttendanceStatusForToday = (student: Student): 'Present' | 'Absent' | 'Late' | 'N/A' => {
    const attendanceToday = student.attendance.find(a => a.date === today && a.subject === selectedSubject);
    return attendanceToday ? attendanceToday.status : 'N/A';
  };

  const filteredRecords = useMemo(() => {
    if (activeTab !== 'records') return [];
    
    const allRecords = students.flatMap(student =>
        student.attendance.map(record => ({
            ...record,
            studentName: student.name,
            rollNumber: student.rollNumber,
            studentId: student.id,
        }))
    );
    
    return allRecords
        .filter(record => {
            const recordDate = record.date;
            return recordDate >= startDate && recordDate <= endDate && record.subject === selectedSubject;
        })
        .sort((a, b) => {
            const dateComparison = new Date(b.date).getTime() - new Date(a.date).getTime();
            if (dateComparison !== 0) return dateComparison;
            return a.studentName.localeCompare(b.studentName);
        });
  }, [students, selectedSubject, startDate, endDate, activeTab]);

  const chatbotContext = useMemo(() => {
    let context = `User is a teacher named ${user.name}. They are viewing the ${activeTab} tab.`;
    if(activeTab === 'daily' || activeTab === 'records') {
        context += ` for the subject: ${selectedSubject}.`
    }
    if (selectedStudent) {
      context += ` They are currently viewing the details for student: ${selectedStudent.name} (Roll No: ${selectedStudent.rollNumber}).`;
    }
    return context;
  }, [user.name, activeTab, selectedSubject, selectedStudent]);

  return (
    <>
      <Header user={user} onLogout={onLogout} onOpenSettings={() => setIsSettingsOpen(true)} />
       {isSettingsOpen && (
        <AccountSettings
            user={user}
            onUpdateUser={onUpdateUser}
            onClose={() => setIsSettingsOpen(false)}
        />
      )}
      <main className="container mx-auto p-4 sm:p-6 lg:p-8">
        <AnimatedElement className="flex flex-wrap justify-between items-center gap-4 mb-6">
          <h1 className="text-3xl font-bold text-white">Teacher Dashboard</h1>
          
          <div className="flex items-center gap-4">
             <label htmlFor="subject-select" className="text-sm font-medium text-gray-300">Class Subject:</label>
             <select
                id="subject-select"
                value={selectedSubject}
                onChange={(e) => setSelectedSubject(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                {ALL_SUBJECTS.map(subject => (
                    <option key={subject} value={subject}>{subject}</option>
                ))}
             </select>
          </div>

          <div className="flex space-x-2">
            <button
                onClick={() => setIsQRScannerOpen(true)}
                className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 transition-transform hover:scale-105"
            >
                Scan Attendance QR
            </button>
            <button
              onClick={() => setIsCameraOpen(true)}
              className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform hover:scale-105"
            >
              Class Face Scan
            </button>
          </div>
        </AnimatedElement>

        {scanStatus && (
          <div className={`fixed top-20 right-8 p-4 rounded-lg shadow-lg text-white z-50 transition-opacity duration-300 ${scanStatus ? 'opacity-100' : 'opacity-0'}`} role="alert">
            {scanStatus.message}
          </div>
        )}
        
        <AnimatedElement className="border-b border-gray-700 mb-6" delay={100}>
          <nav className="-mb-px flex space-x-6" aria-label="Tabs">
            <button
              onClick={() => setActiveTab('daily')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'daily' ? 'active' : ''}`}
              aria-current={activeTab === 'daily' ? 'page' : undefined}
            >
              Daily Attendance
            </button>
            <button
              onClick={() => setActiveTab('leave')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'leave' ? 'active' : ''}`}
              aria-current={activeTab === 'leave' ? 'page' : undefined}
            >
              Leave Requests
            </button>
            <button
              onClick={() => setActiveTab('records')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'records' ? 'active' : ''}`}
              aria-current={activeTab === 'records' ? 'page' : undefined}
            >
              Attendance Records
            </button>
             <button
              onClick={() => setActiveTab('overview')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'overview' ? 'active' : ''}`}
              aria-current={activeTab === 'overview' ? 'page' : undefined}
            >
              Student Overview
            </button>
            <button
              onClick={() => setActiveTab('files')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'files' ? 'active' : ''}`}
              aria-current={activeTab === 'files' ? 'page' : undefined}
            >
              Manage Files
            </button>
             <button
              onClick={() => setActiveTab('links')}
              className={`tab-button py-3 px-1 font-medium text-sm text-gray-400 hover:text-white ${activeTab === 'links' ? 'active' : ''}`}
              aria-current={activeTab === 'links' ? 'page' : undefined}
            >
              Manage Links
            </button>
          </nav>
        </AnimatedElement>
        
        <AnimatedElement>
          {activeTab === 'daily' && (
            <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
              <h2 className="text-xl font-semibold mb-4 text-indigo-400">Student List for <span className="text-white">{selectedSubject}</span></h2>
              <div className="overflow-x-auto">
                <table className="w-full text-left">
                  <thead className="border-b border-gray-600">
                    <tr>
                      <th className="p-3">Name</th>
                      <th className="p-3">Roll Number</th>
                      <th className="p-3">Department</th>
                      <th className="p-3">Attendance Status</th>
                      <th className="p-3">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {students.map(student => {
                      const status = getAttendanceStatusForToday(student);
                      return (
                      <tr key={student.id} className="border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                        <td className="p-3">{student.name}</td>
                        <td className="p-3">{student.rollNumber}</td>
                        <td className="p-3">{student.department}</td>
                        <td className="p-3">
                          <select
                            value={status}
                            onChange={(e) => handleAttendanceChange(student.id, e.target.value as 'Present' | 'Absent' | 'Late')}
                            className={`w-28 appearance-none text-center text-xs font-semibold rounded-full px-2 py-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 transition-colors ${
                            {
                                'Present': 'bg-green-600/50 text-green-200 border border-green-500/50',
                                'Absent': 'bg-red-600/50 text-red-200 border border-red-500/50',
                                'Late': 'bg-yellow-600/50 text-yellow-200 border border-yellow-500/50',
                                'N/A': 'bg-gray-600/50 text-gray-200 border border-gray-500/50'
                            }[status]
                            }`}
                          >
                            <option className="bg-gray-700 text-white" value="N/A" disabled>Not Marked</option>
                            <option className="bg-gray-700 text-white" value="Present">Present</option>
                            <option className="bg-gray-700 text-white" value="Absent">Absent</option>
                            <option className="bg-gray-700 text-white" value="Late">Late</option>
                          </select>
                        </td>
                        <td className="p-3">
                          <button
                            onClick={() => setSelectedStudent(student)}
                            className="text-indigo-400 hover:underline"
                          >
                            View Details
                          </button>
                        </td>
                      </tr>
                    )})}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {activeTab === 'leave' && (
            <LeaveRequestManager 
              leaveApplications={leaveApplications}
              onUpdateLeaveStatus={onUpdateLeaveStatus}
            />
          )}
          
          {activeTab === 'records' && (
             <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                <div className="flex flex-wrap gap-4 items-center justify-between mb-4">
                    <h2 className="text-xl font-semibold text-indigo-400">Records for <span className="text-white">{selectedSubject}</span></h2>
                    <div className="flex flex-wrap items-center gap-4">
                        <div>
                            <label htmlFor="start-date" className="text-sm font-medium text-gray-400 mr-2">From:</label>
                            <input
                                type="date"
                                id="start-date"
                                value={startDate}
                                onChange={(e) => setStartDate(e.target.value)}
                                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-1.5 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                aria-label="Start date for attendance records"
                            />
                        </div>
                        <div>
                            <label htmlFor="end-date" className="text-sm font-medium text-gray-400 mr-2">To:</label>
                            <input
                                type="date"
                                id="end-date"
                                value={endDate}
                                onChange={(e) => setEndDate(e.target.value)}
                                className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-1.5 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                aria-label="End date for attendance records"
                            />
                        </div>
                    </div>
                </div>
            
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="border-b border-gray-600">
                            <tr>
                                <th className="p-3">Date</th>
                                <th className="p-3">Student Name</th>
                                <th className="p-3">Roll Number</th>
                                <th className="p-3">Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredRecords.length > 0 ? filteredRecords.map((record, index) => (
                                <tr key={`${record.date}-${record.studentId}-${index}`} className="border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                                    <td className="p-3">{new Date(record.date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' })}</td>
                                    <td className="p-3">{record.studentName}</td>
                                    <td className="p-3">{record.rollNumber}</td>
                                    <td className="p-3">
                                         <span className={`px-3 py-1 text-xs font-semibold rounded-full ${
                                            record.status === 'Present' ? 'bg-green-600/50 text-green-200' :
                                            record.status === 'Absent' ? 'bg-red-600/50 text-red-200' :
                                            'bg-yellow-600/50 text-yellow-200'
                                          }`}>
                                            {record.status}
                                          </span>
                                    </td>
                                </tr>
                            )) : (
                                <tr>
                                    <td colSpan={4} className="text-center p-8 text-gray-400">
                                        No attendance records found for the selected criteria.
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
          )}

          {activeTab === 'overview' && (
            <StudentAccessManager students={students} setStudents={setStudents} />
          )}

          {activeTab === 'files' && (
            <FileManager mode="teacher" />
          )}

          {activeTab === 'links' && (
            <LinkManager user={user} />
          )}
        </AnimatedElement>
      </main>

      {selectedStudent && (
        <StudentDetailsView
          student={selectedStudent}
          onClose={() => setSelectedStudent(null)}
          onPlanGenerated={handlePlanGenerated}
        />
      )}
      {isCameraOpen && (
        <AttendanceCamera
          students={students}
          onClose={handleBulkAttendanceUpdate}
        />
      )}
      {isQRScannerOpen && (
        <QRCodeScanner
            onClose={() => setIsQRScannerOpen(false)}
            onScanSuccess={handleQRScanSuccess}
        />
      )}
      <Chatbot context={chatbotContext} />
    </>
  );
};

export default TeacherDashboard;
import React from 'react';
import { User } from '../types';

interface HeaderProps {
  user: User;
  onLogout: () => void;
  onOpenSettings: () => void;
}

const Header: React.FC<HeaderProps> = ({ user, onLogout, onOpenSettings }) => {
  return (
    <div className="sticky top-0 z-40">
      {/* Decorative top bar inspired by the image */}
      <div className="h-1 bg-purple-600"></div>

      {/* Main navigation bar */}
      <nav className="bg-gray-950 px-4 sm:px-6 lg:px-8 shadow-lg">
        <div className="container mx-auto flex items-center justify-between h-16">
          {/* Brand/Logo on the left */}
          <div className="flex items-center gap-3">
            <span className="text-2xl" role="img" aria-label="bug icon">🐞</span>
            <span className="text-xl font-bold text-white tracking-tight">Debugging Dynamos ✨</span>
          </div>
          
          {/* Actions on the right */}
          <div className="flex items-center space-x-2 md:space-x-4">
            <span className="hidden sm:inline text-gray-300">
              Welcome, <span className="font-semibold text-white">{user.name}</span>
            </span>
            {/* Settings button */}
            <button
              onClick={onOpenSettings}
              className="p-2 text-gray-300 rounded-full hover:bg-gray-700/50 hover:text-white transition-colors"
              aria-label="Account Settings"
            >
              <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
            </button>
            {/* CTA-style Logout Button */}
            <button
              onClick={onLogout}
              className="px-5 py-2 text-sm font-medium text-white bg-purple-600 rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 focus:ring-offset-gray-950 transition-all duration-200 ease-in-out transform hover:scale-105"
            >
              Logout
            </button>
          </div>
        </div>
      </nav>
    </div>
  );
};

export default Header;
import React, { useState } from 'react';
import { User } from '../types';
import Modal from './Modal';
import Spinner from './Spinner';

interface AccountSettingsProps {
  user: User;
  onUpdateUser: (user: User) => void;
  onClose: () => void;
}

const AccountSettings: React.FC<AccountSettingsProps> = ({ user, onUpdateUser, onClose }) => {
  const [scanOnLogin, setScanOnLogin] = useState(user.enableScanOnLogin || false);
  const [isSaving, setIsSaving] = useState(false);

  const handleToggle = () => {
    setIsSaving(true);
    const newSetting = !scanOnLogin;
    setScanOnLogin(newSetting);

    // Simulate async save
    setTimeout(() => {
      onUpdateUser({ ...user, enableScanOnLogin: newSetting });
      setIsSaving(false);
    }, 500);
  };

  return (
    <Modal title="Account Settings" onClose={onClose}>
      <div className="p-2 sm:p-4 text-gray-200">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-gray-900/50 rounded-lg">
          <div className="mb-4 sm:mb-0 sm:mr-4">
            <h3 className="font-semibold text-white">Enable Face Scan on Login</h3>
            <p className="text-sm text-gray-400 max-w-md">
              For enhanced security, require a face scan every time you log in with your password.
            </p>
          </div>
          <div className="flex items-center gap-4 flex-shrink-0">
            {isSaving && <Spinner />}
            <button
              role="switch"
              aria-checked={scanOnLogin}
              onClick={handleToggle}
              disabled={isSaving}
              className={`relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-gray-800 ${
                scanOnLogin ? 'bg-indigo-600' : 'bg-gray-600'
              }`}
            >
              <span
                className={`inline-block w-4 h-4 transform bg-white rounded-full transition-transform ${
                  scanOnLogin ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default AccountSettings;

import React, { useState, useEffect, useMemo } from 'react';
import { Student, ProgressInsight, AssignmentStatus, Assignment } from '../types';
import { generateProgressInsights } from '../services/geminiService';
import Spinner from './Spinner';
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Cell } from 'recharts';
import AnimatedElement from './AnimatedElement';

interface ProgressTrackerProps {
  student: Student;
}

const AIInsights: React.FC<{ student: Student }> = ({ student }) => {
    const [insights, setInsights] = useState<ProgressInsight | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchInsights = async () => {
            setIsLoading(true);
            setError(null);
            try {
                const result = await generateProgressInsights(student.progress, student.name);
                if (result) {
                    setInsights(result);
                } else {
                    setError('Could not fetch AI insights. Please try again later.');
                }
            } catch (e) {
                setError('An error occurred while fetching insights.');
            } finally {
                setIsLoading(false);
            }
        };

        if (student.progress.length > 0) {
            fetchInsights();
        } else {
            setIsLoading(false);
        }
    }, [student.progress, student.name]);

    if (isLoading) {
        return (
            <div className="flex items-center justify-center p-8 bg-gray-900/50 rounded-lg border border-gray-700">
                <Spinner />
                <span className="ml-4 text-gray-300">Generating AI-powered insights...</span>
            </div>
        );
    }
    
    if (error) {
         return <div className="text-center text-red-400 p-4 bg-red-900/20 rounded-lg">{error}</div>
    }

    if (!insights) {
        return null; // Don't show the card if there are no insights (e.g., no progress data)
    }

    return (
        <div className="p-6 bg-gray-900/50 rounded-xl border border-indigo-500/30">
            <h3 className="text-xl font-bold text-indigo-400 mb-4 flex items-center gap-2">
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg>
                Your AI Academic Coach
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <h4 className="font-semibold text-green-400 mb-2">Strengths</h4>
                    <ul className="list-disc list-inside space-y-1 text-gray-300 text-sm">
                        {insights.strengths.map((s, i) => <li key={i}>{s}</li>)}
                    </ul>
                </div>
                <div>
                    <h4 className="font-semibold text-yellow-400 mb-2">Areas to Focus On</h4>
                     <ul className="list-disc list-inside space-y-1 text-gray-300 text-sm">
                        {insights.areas_for_improvement.map((a, i) => <li key={i}>{a}</li>)}
                    </ul>
                </div>
                 <div>
                    <h4 className="font-semibold text-cyan-400 mb-2">Actionable Advice</h4>
                    <p className="text-gray-300 text-sm italic">"{insights.actionable_advice}"</p>
                </div>
            </div>
        </div>
    );
};

const ProgressTracker: React.FC<ProgressTrackerProps> = ({ student }) => {

    const getStatusChipClass = (status: AssignmentStatus) => {
        switch (status) {
            case AssignmentStatus.Graded: return 'bg-green-600/50 text-green-200';
            case AssignmentStatus.Submitted: return 'bg-blue-600/50 text-blue-200';
            case AssignmentStatus.Pending: return 'bg-yellow-600/50 text-yellow-200';
            case AssignmentStatus.Late: return 'bg-red-600/50 text-red-200';
            default: return 'bg-gray-600/50 text-gray-200';
        }
    };
    
    const chartData = (assignments: Assignment[]) => {
        return assignments
            .filter(a => a.status === AssignmentStatus.Graded && a.score !== undefined)
            .slice(-5) // get last 5 graded assignments
            .map(a => ({
                name: a.title.split(' ').slice(0, 2).join(' ').replace(/:$/, ''), // Improved name shortening
                score: a.score,
                maxScore: a.maxScore,
                percentage: (a.score! / a.maxScore) * 100,
            }));
    };

    if (student.progress.length === 0) {
        return (
            <div className="text-center py-12 bg-gray-800/50 rounded-xl border border-gray-700">
              <h3 className="text-2xl font-bold text-white">No Progress Data Available</h3>
              <p className="text-gray-300 mt-2 max-w-xl mx-auto">
                Your academic progress, including grades and assignment statuses, will appear here once your teacher adds them.
              </p>
            </div>
        );
    }

    return (
        <div className="space-y-8">
            <h2 className="text-3xl font-bold text-white">Academic Progress Tracker</h2>
            <AnimatedElement>
                <AIInsights student={student} />
            </AnimatedElement>
            
            <div className="space-y-6">
                {student.progress.map((subject, index) => (
                    <AnimatedElement key={subject.subjectName} delay={100 * (index + 1)}>
                        <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
                            <div className="flex flex-wrap justify-between items-start gap-4 mb-4">
                                <div>
                                    <h3 className="text-2xl font-bold text-white">{subject.subjectName}</h3>
                                    <p className="text-gray-400 italic">"{subject.teacherFeedback}"</p>
                                </div>
                                <div className="text-right">
                                    <p className="text-sm text-gray-400">Overall Grade</p>
                                    <p className="text-4xl font-bold text-indigo-400">{subject.overallGrade}</p>
                                </div>
                            </div>

                            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                                <div className="lg:col-span-1">
                                    <h4 className="font-semibold text-gray-300 mb-2">Recent Scores</h4>
                                    <div className="h-48">
                                        <ResponsiveContainer width="100%" height="100%">
                                            <BarChart data={chartData(subject.assignments)} margin={{ top: 5, right: 0, left: -25, bottom: 5 }}>
                                                <XAxis dataKey="name" fontSize={10} tick={{ fill: '#9ca3af' }} interval={0} />
                                                <YAxis fontSize={12} tick={{ fill: '#9ca3af' }} domain={[0, 100]} unit="%" />
                                                <Tooltip
                                                  cursor={{ fill: 'rgba(129, 140, 248, 0.1)' }}
                                                  contentStyle={{
                                                      background: '#1f2937',
                                                      border: '1px solid #4b5563',
                                                      borderRadius: '0.5rem',
                                                  }}
                                                  labelStyle={{ color: '#d1d5db' }}
                                                  formatter={(value: number, name, props) => [`${props.payload.score}/${props.payload.maxScore} (${value.toFixed(1)}%)`, 'Score']}
                                                />
                                                <Bar dataKey="percentage" radius={[4, 4, 0, 0]}>
                                                   {chartData(subject.assignments).map((entry, index) => (
                                                        <Cell key={`cell-${index}`} fill={entry.percentage >= 80 ? '#4ade80' : entry.percentage >= 60 ? '#facc15' : '#f87171'} />
                                                    ))}
                                                </Bar>
                                            </BarChart>
                                        </ResponsiveContainer>
                                    </div>
                                </div>

                                <div className="lg:col-span-2">
                                    <h4 className="font-semibold text-gray-300 mb-2">Assignments</h4>
                                    <div className="overflow-x-auto max-h-48 pr-2">
                                        <table className="w-full text-left text-sm">
                                            <thead>
                                                <tr className="border-b border-gray-600">
                                                    <th className="py-2">Title</th>
                                                    <th className="py-2 text-center">Status</th>
                                                    <th className="py-2 text-right">Score</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {subject.assignments.map(ass => (
                                                    <tr key={ass.id} className="border-b border-gray-700/50">
                                                        <td className="py-2 text-white">{ass.title}</td>
                                                        <td className="py-2 text-center">
                                                            <span className={`px-2 py-0.5 text-xs font-semibold rounded-full ${getStatusChipClass(ass.status)}`}>
                                                                {ass.status}
                                                            </span>
                                                        </td>
                                                        <td className="py-2 text-right text-gray-300">
                                                            {ass.score !== undefined ? `${ass.score} / ${ass.maxScore}` : '—'}
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </AnimatedElement>
                ))}
            </div>
        </div>
    );
};

export default ProgressTracker;
import React, { useRef, ReactNode } from 'react';
import useIntersectionObserver from '../hooks/useIntersectionObserver';

interface AnimatedElementProps {
  children: ReactNode;
  className?: string;
  delay?: number; // in ms
  staggerIndex?: number;
}

const AnimatedElement: React.FC<AnimatedElementProps> = ({ children, className = '', delay = 0, staggerIndex }) => {
  const ref = useRef<HTMLDivElement>(null);
  const isVisible = useIntersectionObserver(ref, { threshold: 0.1 });
  
  const style: React.CSSProperties = {
      transitionDelay: `${delay + (staggerIndex ? staggerIndex * 100 : 0)}ms`,
  };

  return (
    <div
      ref={ref}
      className={`fade-in-up-on-scroll ${isVisible ? 'is-visible' : ''} ${className}`}
      style={style}
    >
      {children}
    </div>
  );
};

export default AnimatedElement;

import React, { useRef, useEffect, useState, useCallback } from 'react';
import useLocalStorage from '../hooks/useLocalStorage';
import { Student } from '../types';

interface AttendanceCameraProps {
  students: Student[];
  onClose: (updatedAttendance: { [studentId: string]: 'Present' | 'Absent' }) => void;
}

const AttendanceCamera: React.FC<AttendanceCameraProps> = ({ students, onClose }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanMessage, setScanMessage] = useState('');
  const [localAttendance, setLocalAttendance] = useLocalStorage<{ [studentId: string]: 'Present' | 'Absent' }>(
    'offline-attendance',
    {}
  );

  useEffect(() => {
    async function setupCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err) {
        console.error("Error accessing camera: ", err);
        let message = "Could not access camera. Please ensure it is not in use and permissions are enabled.";
        if (err instanceof DOMException) {
            if (err.name === "NotAllowedError" || err.name === "PermissionDeniedError") {
                message = "Camera access denied. Please enable permissions in your browser settings.";
            } else if (err.name === "NotFoundError" || err.name === "DevicesNotFoundError") {
                message = "No camera found. Please ensure a camera is connected and enabled.";
            } else if (err.name === "NotReadableError" || err.name === "TrackStartError") {
                message = "Cannot access camera. It might be in use by another application or have a hardware issue.";
            }
        }
        setScanMessage(message);
      }
    }
    setupCamera();

    return () => {
      if (videoRef.current && videoRef.current.srcObject) {
        const stream = videoRef.current.srcObject as MediaStream;
        stream.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const handleScan = useCallback(() => {
    setIsScanning(true);
    setScanMessage('Scanning for faces... Please hold still.');

    setTimeout(() => {
      // Simulate recognizing a random subset of students
      const updatedAttendance = { ...localAttendance };
      const studentsToMark = students.slice(0, Math.floor(Math.random() * students.length) + 1);
      
      studentsToMark.forEach(student => {
          updatedAttendance[student.id] = 'Present';
      });

      setLocalAttendance(updatedAttendance);
      setScanMessage(`Recognized ${studentsToMark.length} students. Data saved locally.`);
      setIsScanning(false);
    }, 3000);
  }, [localAttendance, setLocalAttendance, students]);
  
  const handleCloseAndSync = () => {
      onClose(localAttendance);
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 w-full max-w-2xl text-center shadow-xl">
        <h2 className="text-2xl font-bold mb-4">AI Face Recognition Attendance</h2>
        <div className="bg-black rounded-md overflow-hidden border-2 border-gray-600 mb-4">
          <video ref={videoRef} autoPlay playsInline className="w-full h-auto" />
        </div>
        <p className="text-gray-300 mb-4 h-6">{scanMessage}</p>
        <div className="flex justify-center space-x-4">
          <button
            onClick={handleScan}
            disabled={isScanning}
            className="px-6 py-2 bg-indigo-600 rounded-md hover:bg-indigo-700 disabled:bg-indigo-800 disabled:cursor-not-allowed transition duration-150 flex items-center"
          >
            {isScanning && <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>}
            {isScanning ? 'Scanning...' : 'Start Scan'}
          </button>
          <button
            onClick={handleCloseAndSync}
            className="px-6 py-2 bg-gray-600 rounded-md hover:bg-gray-700 transition duration-150"
          >
            Close & Sync
          </button>
        </div>
        <p className="text-xs text-gray-500 mt-4">This is a simulation. Attendance data is saved to your browser's local storage for offline demo.</p>
      </div>
    </div>
  );
};

export default AttendanceCamera;
import React, { useState } from 'react';
import Modal from './Modal';
import { User } from '../types';
import FaceScan from './FaceScan';
import QRCodeDisplay from './QRCodeDisplay';

interface AttendanceCheckinFlowProps {
  user: User;
  onClose: () => void;
  location: GeolocationCoordinates;
}

type Status = 
  | 'needs_face_scan'
  | 'display_qr';

const AttendanceCheckinFlow: React.FC<AttendanceCheckinFlowProps> = ({ user, onClose, location }) => {
  const [status, setStatus] = useState<Status>('needs_face_scan');

  const handleFaceScanSuccess = () => {
      setStatus('display_qr');
  };

  const renderContent = () => {
    switch (status) {
      case 'needs_face_scan':
        return (
            <FaceScan
                mode="login"
                userEmail={user.email}
                onSuccess={handleFaceScanSuccess}
                onClose={onClose}
                title="Attendance Verification"
            />
        );
      case 'display_qr':
        return <QRCodeDisplay user={user} location={location} />;
      default:
        return null;
    }
  };

  // The FaceScan component is a modal itself, so we don't wrap it in our Modal component
  if (status === 'needs_face_scan') {
    return renderContent();
  }

  return (
    <Modal title="Mark Attendance" onClose={onClose}>
      {renderContent()}
    </Modal>
  );
};

export default AttendanceCheckinFlow;

import React from 'react';

interface AttendanceWarningScreenProps {
  onLogout: () => void;
}

const AttendanceWarningScreen: React.FC<AttendanceWarningScreenProps> = ({ onLogout }) => {
  return (
    <div className="flex items-center justify-center min-h-screen p-4 text-center text-white">
      <div className="w-full max-w-lg p-10 bg-gray-800/50 backdrop-blur-sm rounded-2xl shadow-2xl border-2 border-red-500/50">
        <h1 className="text-3xl font-bold text-red-400 mb-4">Access Restricted</h1>
        <p className="text-lg text-gray-300 leading-relaxed">
          Your access to the student portal has been temporarily blocked.
        </p>
        <p className="mt-6 text-xl font-semibold text-yellow-300">
          Please meet your class teacher or the Head of Department (HOD) for further details and to resolve the issue.
        </p>
        <button
          onClick={onLogout}
          className="mt-8 px-8 py-3 text-lg font-semibold text-white bg-red-600 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 focus:ring-offset-gray-900 transition-transform transform hover:scale-105"
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export default AttendanceWarningScreen;
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { ChatMessage } from '../types';
import { getChatbotResponse } from '../services/geminiService';
import Spinner from './Spinner';

interface ChatbotProps {
  context: string;
}

// Make SpeechRecognition available from the browser window
declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}

const Chatbot: React.FC<ChatbotProps> = ({ context }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // States for multi-language and voice features
  const [selectedLang, setSelectedLang] = useState('en-IN');
  const [isListening, setIsListening] = useState(false);
  const [isTTSEnabled, setIsTTSEnabled] = useState(true);
  const recognitionRef = useRef<any>(null);
  const [micError, setMicError] = useState<string | null>(null);

  // Refs to hold the latest state for callbacks to prevent stale closures
  const messagesRef = useRef(messages);
  useEffect(() => { messagesRef.current = messages; }, [messages]);
  const isLoadingRef = useRef(isLoading);
  useEffect(() => { isLoadingRef.current = isLoading; }, [isLoading]);

  // Function to speak text using browser's synthesis API
  const speak = useCallback((text: string, lang: string) => {
    if (!isTTSEnabled || !text || !window.speechSynthesis) return;
    window.speechSynthesis.cancel(); // Stop any previous speech
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = lang;
    window.speechSynthesis.speak(utterance);
  }, [isTTSEnabled]);
  
  const handleSendMessage = useCallback(async (text: string) => {
    if (text.trim() === '' || isLoadingRef.current) return;
    window.speechSynthesis.cancel();

    const userMessage = { sender: 'user' as const, text };
    const newMessages: ChatMessage[] = [...messagesRef.current, userMessage];
    
    setMessages(newMessages);
    setInput('');
    setIsLoading(true);

    try {
      const botResponse = await getChatbotResponse(text, messagesRef.current, context, selectedLang);
      setMessages(prev => [...prev, { sender: 'bot', text: botResponse }]);
      speak(botResponse, selectedLang);
    } catch (e) {
      console.error("Error sending message to AI:", e);
      const errorMessage = "I'm having trouble connecting to my brain right now. Please try again later.";
      setMessages(prev => [...prev, { sender: 'bot', text: errorMessage }]);
      speak(errorMessage, selectedLang);
    } finally {
      setIsLoading(false);
    }
  }, [context, selectedLang, speak]);

  // Setup Speech Recognition
  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      setMicError("Voice input is not supported by this browser.");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = true;
    recognition.lang = selectedLang;
    
    recognition.onstart = () => {
      setMicError(null);
      setIsListening(true);
    };

    recognition.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((result: any) => result[0])
        .map((result) => result.transcript)
        .join('');
      setInput(transcript);
      if (event.results[0].isFinal) {
        handleSendMessage(transcript);
      }
    };

    recognition.onerror = (event: any) => {
      console.error("Speech recognition error:", event.error);
      if (event.error === 'not-allowed') {
        setMicError("Microphone access is required. Enable it in your browser settings.");
      } else if (event.error === 'network') {
        setMicError("Network error with speech recognition. Please check your connection.");
      } else if (event.error !== 'no-speech') {
        setMicError("An issue occurred with the microphone.");
      }
      setIsListening(false);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognitionRef.current = recognition;
    
    return () => {
      if (recognition) {
        recognition.stop();
      }
    };
  }, [selectedLang, handleSendMessage]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleListen = () => {
    if (isListening) {
      recognitionRef.current?.stop();
    } else if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };
  
  const handleLanguageChange = (lang: string) => {
    setSelectedLang(lang);
    setMessages([]); // Clear chat history on language change for new context
    window.speechSynthesis.cancel();
    setMicError(null); // Reset mic error on language change
  };

  const ChatWindow = () => (
    <div className="fixed bottom-24 right-8 w-96 h-[32rem] bg-gray-800/80 backdrop-blur-xl border border-gray-700 rounded-2xl shadow-2xl flex flex-col z-50 transition-all duration-300 ease-in-out">
      <header className="p-4 bg-gray-900/50 rounded-t-2xl border-b border-gray-700 flex justify-between items-center">
        <div>
            <h3 className="font-bold text-white text-lg">AI Assistant</h3>
            <div className="flex gap-2 mt-1">
                <button onClick={() => handleLanguageChange('en-IN')} className={`px-2 py-0.5 text-xs rounded ${selectedLang === 'en-IN' ? 'bg-indigo-600 text-white' : 'bg-gray-600 text-gray-300'}`}>English</button>
                <button onClick={() => handleLanguageChange('hi-IN')} className={`px-2 py-0.5 text-xs rounded ${selectedLang === 'hi-IN' ? 'bg-indigo-600 text-white' : 'bg-gray-600 text-gray-300'}`}>हिंदी</button>
                <button onClick={() => handleLanguageChange('mr-IN')} className={`px-2 py-0.5 text-xs rounded ${selectedLang === 'mr-IN' ? 'bg-indigo-600 text-white' : 'bg-gray-600 text-gray-300'}`}>मराठी</button>
            </div>
        </div>
        <button onClick={() => { setIsTTSEnabled(!isTTSEnabled); window.speechSynthesis.cancel(); }} className="text-white" aria-label={isTTSEnabled ? "Mute audio" : "Unmute audio"}>
            {isTTSEnabled ? 
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M5.74 8.76a.75.75 0 00-1.48-.32L2.55 12.1A.75.75 0 003.2 13h1.05a8.003 8.003 0 0011.5 0h1.05a.75.75 0 00.65-.9l-1.7-3.66a.75.75 0 00-1.48.32L14.45 11h-1.12a6.5 6.5 0 01-7.58 0H4.55L5.74 8.76zM10 4a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 4z"></path></svg> :
              <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M12.442 12.442a.75.75 0 010 1.06l-1.06 1.06a.75.75 0 01-1.06-1.06l1.06-1.06a.75.75 0 011.06 0zM10.25 5.5a.75.75 0 00-1.5 0v2.75a.75.75 0 001.5 0V5.5zM14.28 10a.75.75 0 000-1.5h-2.75a.75.75 0 000 1.5h2.75zM15 13.25a.75.75 0 001.06 1.06l1.06-1.06a.75.75 0 00-1.06-1.06l-1.06 1.06zM7.558 12.442a.75.75 0 01-1.06 0L5.439 11.38a.75.75 0 011.06-1.06l1.06 1.06a.75.75 0 010 1.06zM8.5 10a.75.75 0 01-.75.75H5a.75.75 0 010-1.5h2.75A.75.75 0 018.5 10zM5.439 8.62a.75.75 0 01-1.06-1.06L5.44 6.5a.75.75 0 011.06 1.06L5.439 8.62zM13.44 6.5a.75.75 0 00-1.06 1.06l1.06 1.06a.75.75 0 001.06-1.06l-1.06-1.06z"></path></svg>
            }
        </button>
      </header>
      <div className="flex-1 p-4 overflow-y-auto space-y-4">
        {messages.map((msg, index) => (
          <div key={index} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${msg.sender === 'user' ? 'bg-indigo-600 text-white' : 'bg-gray-700 text-gray-200'}`}>
              <p className="text-sm" style={{ whiteSpace: "pre-wrap" }}>{msg.text}</p>
            </div>
          </div>
        ))}
        {isLoading && (
            <div className="flex justify-start">
                 <div className="max-w-xs lg:max-w-md px-4 py-2 rounded-2xl bg-gray-700 text-gray-200">
                    <Spinner/>
                 </div>
            </div>
        )}
        <div ref={messagesEndRef} />
      </div>
      <div className="p-4 border-t border-gray-700 bg-gray-900/50 rounded-b-2xl">
        {micError && <p className="text-xs text-red-400 text-center pb-2">{micError}</p>}
        <div className="flex items-center space-x-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(input)}
            placeholder="Ask a question..."
            className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
           <button 
                onClick={handleListen}
                disabled={!!micError}
                className={`p-2 rounded-lg transition-colors flex items-center justify-center w-10 h-10 shrink-0
                    ${!!micError ? 'bg-gray-700 text-gray-500 cursor-not-allowed' : ''}
                    ${isListening ? 'bg-red-600 text-white animate-pulse' : ''}
                    ${!isListening && !micError ? 'bg-gray-600 text-white hover:bg-gray-500' : ''}
                `}
                aria-label={isListening ? "Stop listening" : !!micError ? "Microphone unavailable" : "Start listening"}
            >
                {isLoading && !isListening ? (
                    <Spinner />
                ) : !!micError ? (
                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M13.207 14.621a.5.5 0 01-.707-.707l3.95-3.95a.5.5 0 01.707.707l-3.95 3.95zM7.45 10.379a3 3 0 000 4.243V10.38zM10 12a2 2 0 100-4 2 2 0 000 4z"></path>
                        <path d="M3.793 4.5l12.5 12.5a.5.5 0 01-.707.707l-12.5-12.5a.5.5 0 01.707-.707zM10 4a3 3 0 013 3v.5a.5.5 0 01-1 0V7a2 2 0 00-2-2 2 2 0 00-1.632.793l.879.879A2.002 2.002 0 0110 6.5a2 2 0 012 2v2.5a.5.5 0 01-1 0v-.379l-.879-.879A3.001 3.001 0 0110 4z"></path>
                        <path d="M5.5 8.5A.5.5 0 016 9v1a4 4 0 00.902 2.593l-.879.879A5 5 0 015 10V9a.5.5 0 01.5-.5z"></path>
                        <path d="M15 9.5a.5.5 0 01.5.5v1a5 5 0 01-4.5 4.975V17h3a.5.5 0 010 1h-7a.5.5 0 010-1h3v-2.025a5 5 0 01-1.258-1.56L9.65 14.5A4.002 4.002 0 0014 10V9.5a.5.5 0 011 0z"></path>
                    </svg>
                ) : (
                    <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M7 4a3 3 0 016 0v6a3 3 0 11-6 0V4z"></path><path d="M5.5 8.5A.5.5 0 016 9v1a4 4 0 004 4 4 4 0 004-4V9a.5.5 0 011 0v1a5 5 0 01-4.5 4.975V17h3a.5.5 0 010 1h-7a.5.5 0 010-1h3v-2.025A5 5 0 015 10V9a.5.5 0 01.5-.5z"></path></svg>
                )}
            </button>
          <button onClick={() => handleSendMessage(input)} className="bg-indigo-600 text-white p-2 rounded-lg hover:bg-indigo-700 disabled:opacity-50" disabled={isLoading}>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M12 5l7 7-7 7" /></svg>
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <>
      {isOpen && <ChatWindow />}
      <button
        onClick={() => {
            setIsOpen(!isOpen);
            if(isOpen) window.speechSynthesis.cancel(); // Stop speaking if closing
        }}
        className="fixed bottom-8 right-8 bg-indigo-600 text-white rounded-full p-4 shadow-lg hover:bg-indigo-700 transition-transform transform hover:scale-110 z-50"
        aria-label={isOpen ? "Close chatbot" : "Open chatbot"}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>
      </button>
    </>
  );
};

export default Chatbot;
import React, { useState, useEffect, useRef } from 'react';

const CursorFollower: React.FC = () => {
  const cursorRef = useRef<HTMLDivElement>(null);
  const [isHovering, setIsHovering] = useState(false);
  // Use refs to store the target position to avoid re-renders on mouse move
  const targetPos = useRef<{ x: number, y: number }>({ x: 0, y: 0 });
  const currentPos = useRef<{ x: number, y: number }>({ x: 0, y: 0 });
  const animationFrameId = useRef<number | null>(null);

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      const { clientX, clientY } = e;
      targetPos.current = { x: clientX, y: clientY };

      const target = e.target as HTMLElement;
      // Check for common interactive elements or a custom data attribute
      const isInteractive = target.closest(
        'a, button, [role="button"], input, select, textarea, [data-interactive]'
      );
      setIsHovering(!!isInteractive);
    };
    
    const animateCursor = () => {
        if (cursorRef.current) {
            const dX = targetPos.current.x - currentPos.current.x;
            const dY = targetPos.current.y - currentPos.current.y;
            
            // Smoothly move the current position towards the target
            currentPos.current.x += dX * 0.2;
            currentPos.current.y += dY * 0.2;

            cursorRef.current.style.transform = `translate(${currentPos.current.x}px, ${currentPos.current.y}px) translate(-50%, -50%)`;
        }
        animationFrameId.current = requestAnimationFrame(animateCursor);
    };

    window.addEventListener('mousemove', handleMouseMove);
    animationFrameId.current = requestAnimationFrame(animateCursor);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      if (animationFrameId.current) {
        cancelAnimationFrame(animationFrameId.current);
      }
    };
  }, []);

  return (
    <div
      id="cursor-follower"
      ref={cursorRef}
      className={isHovering ? 'hovered' : ''}
    />
  );
};

export default CursorFollower;
import React, { useRef, useEffect, useState, useCallback } from 'react';
import Spinner from './Spinner';
import { User } from '../types';

// Use a discriminated union for stronger type safety between login and signup modes.
type FaceScanProps = {
  onClose: () => void;
  title?: string;
} & (
  {
    mode: 'signup';
    onSuccess: (imageDataUrl: string) => void;
    userEmail?: never; // Ensure userEmail is not passed in signup mode
  } | {
    mode: 'login';
    onSuccess: () => void;
    userEmail: string; // Ensure userEmail is passed in login mode
  }
);


const FaceScan: React.FC<FaceScanProps> = ({ onSuccess, onClose, title, mode, userEmail }) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [status, setStatus] = useState<'idle' | 'scanning' | 'success'>('idle');
  const [comparisonStatus, setComparisonStatus] = useState<'idle' | 'comparing' | 'success' | 'fail'>('idle');
  const [message, setMessage] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [registeredImageUrl, setRegisteredImageUrl] = useState<string | null>(null);
  const [isImageLoading, setIsImageLoading] = useState(true);
  const [scanStepMessage, setScanStepMessage] = useState('');
  const [confidence, setConfidence] = useState(0);

  useEffect(() => {
    // This effect handles fetching the correct user's registered photo for login verification.
    if (mode === 'login' && userEmail) {
      setIsImageLoading(true);
      setMessage('Loading registered photo...');
      try {
        const usersData = window.localStorage.getItem('users-list');
        if (usersData) {
            const users: User[] = JSON.parse(usersData);
            const user = users.find(u => u.email === userEmail);
            if (user && user.registeredPhotoUrl) {
                setRegisteredImageUrl(user.registeredPhotoUrl);
                setMessage('Position your face to verify your identity.');
            } else {
                setRegisteredImageUrl('https://picsum.photos/seed/default-avatar/256/320?grayscale');
                setMessage('No face registration data found for this user.');
                setError('No face registration data found for this user.');
            }
        } else {
            setRegisteredImageUrl('https://picsum.photos/seed/default-avatar/256/320?grayscale');
            setMessage('User data not found.');
             setError('User data not found.');
        }
      } catch (e) {
          console.error("Failed to load user data from localStorage", e);
          setRegisteredImageUrl('https://picsum.photos/seed/default-avatar/256/320?grayscale');
          setMessage('Error loading user data.');
          setError('Error loading user data.');
      } finally {
          setIsImageLoading(false);
      }
    } else if (mode === 'signup') {
        setIsImageLoading(false);
        setMessage('Position your face to register for Face ID.');
    }
  }, [mode, userEmail]);

  const stopCamera = useCallback(() => {
    if (videoRef.current && videoRef.current.srcObject) {
      (videoRef.current.srcObject as MediaStream).getTracks().forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
  }, []);

  useEffect(() => {
    async function setupCamera() {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        setError("Camera API not supported by your browser.");
        return;
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err) {
        console.error("Error accessing camera: ", err);
        let message = "Could not access camera. Please ensure it is not in use and permissions are enabled.";
        if (err instanceof DOMException) {
            if (err.name === "NotAllowedError" || err.name === "PermissionDeniedError") {
                message = "Camera access denied. Please enable permissions in your browser settings.";
            } else if (err.name === "NotFoundError" || err.name === "DevicesNotFoundError") {
                message = "No camera found. Please ensure a camera is connected and enabled.";
            } else if (err.name === "NotReadableError" || err.name === "TrackStartError") {
                message = "Cannot access camera. It might be in use by another application or have a hardware issue.";
            }
        }
        setError(message);
      }
    }
    setupCamera();
    return () => {
      stopCamera();
    };
  }, [stopCamera]);

  const handleClose = () => {
    stopCamera();
    onClose();
  };

  const captureImage = (): string | null => {
    if (videoRef.current) {
        const canvas = document.createElement('canvas');
        const video = videoRef.current;
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        if (ctx) {
            ctx.translate(canvas.width, 0);
            ctx.scale(-1, 1);
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            return canvas.toDataURL('image/png');
        }
    }
    return null;
  };

  const handleStartScan = useCallback(() => {
    const signupOnSuccess = onSuccess as (imageDataUrl: string) => void;
    setStatus('scanning');
    
    setTimeout(() => {
      setScanStepMessage('Analyzing facial landmarks...');
      setTimeout(() => {
        setScanStepMessage('Generating biometric template...');
        setTimeout(() => {
            const imageDataUrl = captureImage();
            if (imageDataUrl) {
                setStatus('success');
                setScanStepMessage('');
                setMessage('✅ Biometric profile created successfully!');
                setTimeout(() => {
                    stopCamera();
                    signupOnSuccess(imageDataUrl);
                }, 1500);
            } else {
                setStatus('idle');
                setError('Could not capture image from camera.');
                setMessage('');
                setScanStepMessage('');
            }
        }, 1500);
      }, 1500);
    }, 100);
  }, [onSuccess, stopCamera]);
  
  const handleCompareAndVerify = useCallback(() => {
    const loginOnSuccess = onSuccess as () => void;
    setComparisonStatus('comparing');
    setConfidence(0);

    setTimeout(() => {
      setScanStepMessage('Generating live biometric template...');
      setConfidence(30);
      setTimeout(() => {
        setScanStepMessage('Performing liveness check...');
        setConfidence(50);
        setTimeout(() => {
          setScanStepMessage('Comparing templates...');
          setConfidence(70);
          setTimeout(() => {
              const isMatch = Math.random() > 0.2; // 80% success rate for demo
              const finalConfidence = isMatch ? (Math.random() * 10 + 90) : (Math.random() * 50 + 20);
              setConfidence(finalConfidence);
              
              if (isMatch) {
                  setComparisonStatus('success');
                  setMessage(`✅ Match Confirmed! Confidence: ${finalConfidence.toFixed(1)}%`);
                  setScanStepMessage('');
                  setTimeout(() => {
                      stopCamera();
                      loginOnSuccess();
                  }, 1500);
              } else {
                  setComparisonStatus('fail');
                  setMessage(`❌ Verification Failed. Confidence: ${finalConfidence.toFixed(1)}%`);
                  setScanStepMessage('Low confidence score. Please try again.');
              }
          }, 1500);
        }, 1500);
      }, 1500);
    }, 100);
  }, [onSuccess, stopCamera]);

  const handleTryAgain = () => {
    setComparisonStatus('idle');
    setScanStepMessage('');
    setMessage('Position your face to verify your identity.');
    setConfidence(0);
  };

  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {
    e.currentTarget.src = 'https://picsum.photos/seed/default-avatar/256/320?grayscale';
    setIsImageLoading(false);
    setMessage('Registered photo failed to load.');
    setError('Registered photo failed to load.');
  };


  const renderSignupView = () => (
     <div className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-2xl p-6 w-full max-w-md text-center shadow-2xl border border-gray-700 relative">
        <h2 className="text-2xl font-bold mb-4 text-white">{title || 'Face Scan Registration'}</h2>
        
        {error ? (
          <div className="text-red-400 p-4 bg-red-900/50 rounded-lg min-h-[320px] flex items-center justify-center">{error}</div>
        ) : (
          <div className="relative w-64 h-80 mx-auto rounded-lg overflow-hidden border-4 border-gray-600 mb-4 flex items-center justify-center bg-gray-900">
            <video ref={videoRef} autoPlay playsInline muted className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 min-w-full min-h-full w-auto h-auto object-cover transform scale-x-[-1]" />
            <div className={`absolute inset-0 transition-all duration-500 rounded-md ${
              status === 'scanning' ? 'border-8 border-cyan-400 animate-pulse' :
              status === 'success' ? 'border-8 border-green-500' :
              'border-4 border-gray-600'
            }`}></div>
            {status === 'scanning' && (
              <div className="absolute top-0 left-0 w-full h-1 bg-cyan-400 shadow-[0_0_15px_5px_rgba(0,255,255,0.7)] animate-scan-y"></div>
            )}
            {status === 'success' && (
                <div className="absolute inset-0 flex items-center justify-center bg-green-500/50">
                    <svg className="w-24 h-24 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            )}
          </div>
        )}
        
        <p className={`text-lg h-8 mb-2 font-medium transition-colors duration-300 ${
            status === 'success' ? 'text-green-400' : 'text-gray-300'
        }`}>{message}</p>
        <p className="text-sm h-5 text-cyan-400">{scanStepMessage}</p>

        <div className="flex justify-center space-x-4 mt-4">
          {status === 'idle' && !error && (
            <button onClick={handleStartScan} className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105">
              Start Scan
            </button>
          )}
          <button onClick={handleClose} className="px-6 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700">
            {status === 'success' ? 'Done' : 'Cancel'}
          </button>
        </div>
      </div>
    </div>
  );

  const renderLoginView = () => (
    <div className="fixed inset-0 bg-black bg-opacity-80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-2xl p-6 w-full max-w-3xl text-center shadow-2xl border border-gray-700">
        <h2 className="text-2xl font-bold mb-4 text-white">{title || 'Face Verification'}</h2>
        {error ? (
          <div className="text-red-400 p-4 bg-red-900/50 rounded-lg min-h-[320px] flex items-center justify-center">
            <div>
              <p>{error}</p>
              <button onClick={handleClose} className="mt-4 px-6 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700">Close</button>
            </div>
          </div>
        ) : (
          <>
            <div className="flex flex-col md:flex-row gap-6 justify-center items-start mb-4">
              {/* Registered Photo Panel */}
              <div className="w-full md:w-1/2">
                <h3 className="text-lg font-semibold text-gray-300 mb-2">Registered Faceprint</h3>
                <div className="bg-gray-900 rounded-lg p-2 border-2 border-gray-600 flex items-center justify-center aspect-[4/5]">
                  {isImageLoading ? (
                    <Spinner />
                  ) : (
                    <img
                      id="registered-user-image"
                      src={registeredImageUrl!}
                      alt="Registered User"
                      className="rounded-md w-full object-cover aspect-[4/5]"
                      onError={handleImageError}
                    />
                  )}
                </div>
              </div>
              {/* Live Camera Panel */}
              <div className="w-full md:w-1/2">
                <h3 className="text-lg font-semibold text-gray-300 mb-2">Live Verification Scan</h3>
                <div className={`relative w-full aspect-[4/5] rounded-lg overflow-hidden border-4 bg-gray-900 transition-colors duration-300 ${
                  comparisonStatus === 'comparing' ? 'border-cyan-400 animate-pulse' :
                  comparisonStatus === 'success' ? 'border-green-500' :
                  comparisonStatus === 'fail' ? 'border-red-500' : 'border-gray-600'
                }`}>
                  <video ref={videoRef} autoPlay playsInline muted className="w-full h-full object-cover transform scale-x-[-1]" />
                  {comparisonStatus === 'success' && (
                    <div className="absolute inset-0 flex items-center justify-center bg-green-500/50">
                        <svg className="w-24 h-24 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                  )}
                   {comparisonStatus === 'comparing' && (
                      <div className="absolute top-0 left-0 w-full h-1 bg-cyan-400 shadow-[0_0_15px_5px_rgba(0,255,255,0.7)] animate-scan-y"></div>
                  )}
                </div>
              </div>
            </div>
            
             <div className="h-16 my-2 flex flex-col justify-center">
                 <p className={`text-lg font-medium transition-colors duration-300 ${
                     comparisonStatus === 'success' ? 'text-green-400' :
                     comparisonStatus === 'fail' ? 'text-red-400' : 'text-gray-300'
                 }`}>{message}</p>
                 <p className="text-sm h-5 text-cyan-400">{scanStepMessage}</p>
                 {comparisonStatus === 'comparing' && (
                    <div className="w-full bg-gray-600 rounded-full h-2.5 mt-2">
                      <div className="bg-cyan-400 h-2.5 rounded-full" style={{ width: `${confidence}%`, transition: 'width 1.5s ease-in-out' }}></div>
                    </div>
                 )}
             </div>

            <div className="flex justify-center space-x-4">
               <button
                  onClick={comparisonStatus === 'fail' ? handleTryAgain : handleCompareAndVerify}
                  disabled={isImageLoading || comparisonStatus === 'comparing' || comparisonStatus === 'success' || !!error}
                  className="px-6 py-2 w-48 text-lg bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 disabled:bg-gray-500 disabled:cursor-not-allowed transition-all transform hover:scale-105 flex items-center justify-center"
               >
                 {comparisonStatus === 'comparing' ? <Spinner /> : 
                  comparisonStatus === 'fail' ? 'Try Again' : 'Compare & Verify'}
               </button>
               <button onClick={handleClose} className="px-6 py-2 text-lg bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700">
                 Cancel
               </button>
            </div>
          </>
        )}
      </div>
    </div>
  );

  return (
    <>
      {mode === 'login' ? renderLoginView() : renderSignupView()}
      <style>{`
        @keyframes scan-y {
          0% { transform: translateY(0%); opacity: 0; }
          20% { opacity: 1; }
          80% { opacity: 1; }
          100% { transform: translateY(100%); opacity: 0; }
        }
        .animate-scan-y {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: linear-gradient(to bottom, transparent 0%, rgba(0, 255, 255, 0.4) 50%, transparent 100%);
          animation: scan-y 2.5s infinite ease-in-out;
          box-shadow: none;
        }
      `}</style>
    </>
  );
};

export default FaceScan;
import React, { useState, useMemo, useRef } from 'react';
import useLocalStorage from '../hooks/useLocalStorage';
import { FileSystemNode, FolderNode, FileNode } from '../types';
import Modal from './Modal';

interface FileManagerProps {
  mode: 'teacher' | 'student';
}

const FileManager: React.FC<FileManagerProps> = ({ mode }) => {
  const [items, setItems] = useLocalStorage<FileSystemNode[]>('file-system', []);
  const [currentFolderId, setCurrentFolderId] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [searchQuery, setSearchQuery] = useState('');

  // States for folder creation modal and notifications
  const [isCreatingFolder, setIsCreatingFolder] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  const [folderNameError, setFolderNameError] = useState('');
  const [notification, setNotification] = useState<{ type: 'success' | 'error', message: string } | null>(null);
  
  const showNotification = (message: string, type: 'success' | 'error' = 'success') => {
    setNotification({ message, type });
    setTimeout(() => {
      setNotification(null);
    }, 4000);
  };

  const breadcrumbs = useMemo(() => {
    const path: (FolderNode | { id: null; name: string })[] = [];
    let currentId = currentFolderId;
    while (currentId) {
      const folder = items.find(i => i.id === currentId) as FolderNode;
      if (folder) {
        path.unshift(folder);
        currentId = folder.parentId;
      } else {
        break; // Should not happen in a consistent state
      }
    }
    path.unshift({ id: null, name: 'Root' });
    return path;
  }, [currentFolderId, items]);

  const currentItems = useMemo(() => {
    const itemsInFolder = items.filter(item => item.parentId === currentFolderId);
    
    const filteredItems = searchQuery
      ? itemsInFolder.filter(item =>
          item.name.toLowerCase().includes(searchQuery.toLowerCase())
        )
      : itemsInFolder;

    return filteredItems.sort((a, b) => {
        if (a.type === b.type) return a.name.localeCompare(b.name);
        return a.type === 'folder' ? -1 : 1;
      });
  }, [items, currentFolderId, searchQuery]);
  
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const newFile: FileNode = {
        id: `file-${Date.now()}`,
        name: file.name,
        type: 'file',
        parentId: currentFolderId,
        dataUrl: e.target?.result as string,
        fileType: file.type,
      };
      setItems([...items, newFile]);
      showNotification(`File '${file.name}' uploaded successfully.`);
    };
    reader.readAsDataURL(file);
    if(fileInputRef.current) fileInputRef.current.value = ""; // Reset input
  };

  const handleCreateFolder = () => {
    setNewFolderName('');
    setFolderNameError('');
    setIsCreatingFolder(true);
  };

  const handleConfirmCreateFolder = (e: React.FormEvent) => {
    e.preventDefault();
    const trimmedName = newFolderName.trim();

    if (!trimmedName) {
      setFolderNameError('Folder name cannot be empty.');
      return;
    }

    const isDuplicate = items.some(
      item =>
        item.parentId === currentFolderId &&
        item.name.toLowerCase() === trimmedName.toLowerCase()
    );

    if (isDuplicate) {
      setFolderNameError(`An item named "${trimmedName}" already exists in this folder.`);
      return;
    }
    
    const newFolder: FolderNode = {
      id: `folder-${Date.now()}`,
      name: trimmedName,
      type: 'folder',
      parentId: currentFolderId,
    };
    setItems([...items, newFolder]);
    
    setIsCreatingFolder(false);
    showNotification(`Folder '${trimmedName}' created successfully.`);
  };

  const handleDelete = (item: FileSystemNode) => {
    if (!window.confirm(`Are you sure you want to delete "${item.name}"? This cannot be undone.`)) {
      return;
    }
    let idsToDelete = new Set<string>([item.id]);
    if (item.type === 'folder') {
      const findChildrenRecursive = (folderId: string) => {
        const children = items.filter(i => i.parentId === folderId);
        children.forEach(child => {
          idsToDelete.add(child.id);
          if (child.type === 'folder') {
            findChildrenRecursive(child.id);
          }
        });
      };
      findChildrenRecursive(item.id);
    }
    setItems(items.filter(i => !idsToDelete.has(i.id)));
    showNotification(`"${item.name}" was deleted.`);
  };
  
  const handleDownload = (file: FileNode) => {
      const link = document.createElement('a');
      link.href = file.dataUrl;
      link.download = file.name;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
  }
  
  const FolderIcon = () => <svg className="w-6 h-6 text-yellow-500" fill="currentColor" viewBox="0 0 20 20"><path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path></svg>;
  const FileIcon = () => <svg className="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20"><path d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm.293 3.293a1 1 0 011.414 0L10 10.586l4.293-4.293a1 1 0 111.414 1.414L11.414 12l4.293 4.293a1 1 0 01-1.414 1.414L10 13.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 12 4.293 7.707a1 1 0 010-1.414z"></path></svg>;
  const PDFIcon = () => <svg className="w-6 h-6 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd"></path></svg>;

  const getFileIcon = (fileType: string) => {
      if (fileType === 'application/pdf') return <PDFIcon />;
      return <FileIcon />;
  }

  return (
    <div className="relative bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      {notification && (
        <div 
          className={`fixed top-20 right-8 p-4 rounded-lg shadow-lg text-white z-50 transition-transform transform animate-fade-in-down ${notification.type === 'success' ? 'bg-green-600' : 'bg-red-600'}`} 
          role="alert"
        >
          {notification.message}
        </div>
      )}
      
      {isCreatingFolder && (
        <Modal title="Create New Folder" onClose={() => setIsCreatingFolder(false)}>
          <form onSubmit={handleConfirmCreateFolder} className="p-2 space-y-4">
            <div>
              <label htmlFor="folderName" className="block text-sm font-medium text-gray-300 mb-2">Folder Name</label>
              <input
                type="text"
                id="folderName"
                value={newFolderName}
                onChange={(e) => {
                  setNewFolderName(e.target.value);
                  if (folderNameError) setFolderNameError('');
                }}
                className={`w-full px-4 py-2 bg-gray-700/50 border rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition-colors ${folderNameError ? 'border-red-500 focus:ring-red-500' : 'border-gray-600 focus:ring-indigo-500'}`}
                placeholder="e.g., Lecture Notes"
                autoFocus
                aria-invalid={!!folderNameError}
                aria-describedby="folder-name-error"
              />
              {folderNameError && <p id="folder-name-error" className="text-sm text-red-400 mt-2">{folderNameError}</p>}
            </div>
            <div className="flex justify-end gap-4 pt-2">
              <button
                type="button"
                onClick={() => setIsCreatingFolder(false)}
                className="px-5 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-5 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700"
              >
                Create
              </button>
            </div>
          </form>
        </Modal>
      )}

      <div className="flex flex-wrap justify-between items-center gap-4 mb-4">
        <h2 className="text-xl font-semibold text-indigo-400">
            {mode === 'teacher' ? 'File Manager' : 'Study Materials'}
        </h2>
        {mode === 'teacher' && (
          <div className="flex gap-2">
            <input type="file" ref={fileInputRef} onChange={handleFileSelect} className="hidden" />
            <button onClick={() => fileInputRef.current?.click()} className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700">
              ➕ Upload File
            </button>
            <button onClick={handleCreateFolder} className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700">
              📁 New Folder
            </button>
          </div>
        )}
      </div>
      
      <nav className="mb-4 flex items-center gap-2 text-sm text-gray-400">
        {breadcrumbs.map((crumb, index) => (
            <React.Fragment key={crumb.id || 'root'}>
                <button 
                    onClick={() => {
                        setCurrentFolderId(crumb.id);
                        setSearchQuery(''); // Reset search when changing folders
                    }} 
                    className="hover:text-white hover:underline"
                >
                    {crumb.name}
                </button>
                {index < breadcrumbs.length - 1 && <span>/</span>}
            </React.Fragment>
        ))}
      </nav>

      <div className="mb-4">
        <div className="relative">
          <span className="absolute inset-y-0 left-0 flex items-center pl-3">
            <svg className="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd"></path>
            </svg>
          </span>
          <input
            type="text"
            placeholder="Search files and folders in this directory..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
            aria-label="Search files and folders"
          />
        </div>
      </div>
      
      <div className="overflow-x-auto">
        <table className="w-full text-left">
          <thead className="border-b border-gray-600">
            <tr>
              <th className="p-3">Name</th>
              <th className="p-3 hidden sm:table-cell">Type</th>
              <th className="p-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {currentItems.length > 0 ? currentItems.map(item => (
              <tr key={item.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                <td className="p-3">
                  <button 
                    className={`flex items-center gap-3 text-white ${item.type === 'folder' ? 'cursor-pointer' : 'cursor-default'}`}
                    onClick={() => {
                      if (item.type === 'folder') {
                        setCurrentFolderId(item.id);
                        setSearchQuery(''); // Reset search when opening a folder
                      }
                    }}
                    disabled={item.type === 'file'}
                  >
                    {item.type === 'folder' ? <FolderIcon /> : getFileIcon((item as FileNode).fileType)}
                    <span>{item.name}</span>
                  </button>
                </td>
                <td className="p-3 text-gray-400 capitalize hidden sm:table-cell">{item.type}</td>
                <td className="p-3">
                  {mode === 'teacher' && (
                    <button onClick={() => handleDelete(item)} className="p-1 text-red-400 hover:text-red-300" aria-label={`Delete ${item.name}`}>
                       <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd"></path></svg>
                    </button>
                  )}
                  {mode === 'student' && item.type === 'file' && (
                     <button onClick={() => handleDownload(item as FileNode)} className="flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700">
                        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                        Download
                    </button>
                  )}
                </td>
              </tr>
            )) : (
              <tr>
                <td colSpan={3} className="text-center p-8 text-gray-400">
                    {searchQuery ? `No files or folders match "${searchQuery}".` : 'This folder is empty.'}
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default FileManager;
import React, { useState } from 'react';
import { generatePersonalizedLearningPath } from '../services/geminiService';
import Spinner from './Spinner';
import { Student, LearningPath } from '../types';

interface LearningPathGeneratorProps {
  student: Student;
  onPlanGenerated: (learningPath: LearningPath) => void;
}

const LearningPathGenerator: React.FC<LearningPathGeneratorProps> = ({ student, onPlanGenerated }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    setIsLoading(true);
    setError(null);

    const path = await generatePersonalizedLearningPath(student);
    if (path) {
      onPlanGenerated(path);
    } else {
      setError("Failed to generate a learning path. The AI service may be unavailable. Please try again later.");
    }
    setIsLoading(false);
  };

  return (
    <div className="bg-gray-900/50 p-6 rounded-xl border border-gray-700 mt-6">
      <h3 className="text-2xl font-bold mb-4 text-indigo-400">AI-Powered Learning Path</h3>
      
      {!student.learningPath && (
        <p className="text-gray-400 mb-4">
          Analyze {student.name}'s attendance data to generate a personalized weekly study plan.
        </p>
      )}

      {error && <p className="text-red-400 my-4 text-center">{error}</p>}
      
      <div className="flex justify-center">
        <button
          onClick={handleGenerate}
          disabled={isLoading}
          className="w-full md:w-1/2 flex items-center justify-center px-6 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-indigo-800"
        >
          {isLoading ? (
            <>
              <Spinner /> <span className="ml-2">Generating...</span>
            </>
          ) : student.learningPath ? (
            'Regenerate Plan'
          ) : (
            'Generate Personalized Plan'
          )}
        </button>
      </div>
       {student.learningPath && (
        <p className="text-xs text-gray-500 mt-2 text-center">
          A plan already exists. Clicking will generate a new one.
        </p>
      )}
    </div>
  );
};

export default LearningPathGenerator;
import React from 'react';
import { LearningPath } from '../types';

interface LearningPathViewProps {
  learningPath: LearningPath;
}

const LearningPathView: React.FC<LearningPathViewProps> = ({ learningPath }) => {
  if (!learningPath) return null;
  
  const iconMap: { [key: string]: string } = {
    Monday: '📅',
    Tuesday: '📚',
    Wednesday: '✏️',
    Thursday: '💡',
    Friday: '🎯',
    Saturday: '⭐',
    Sunday: '🧘',
  };

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h2 className="text-2xl font-bold mb-2 text-indigo-400">Your AI-Generated Weekly Plan</h2>
      <p className="text-gray-300 mb-6 italic">"{learningPath.overall_summary}"</p>

      <div className="space-y-4">
        {learningPath.daily_plan.map((day, index) => (
          <div key={index} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700 transition-all duration-300 hover:border-indigo-500 hover:shadow-lg">
            <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                <span className="text-xl">{iconMap[day.day] || '🗓️'}</span>
                {day.day}: <span className="text-indigo-400">{day.focus_topic}</span>
            </h3>
            <p className="text-sm text-gray-400 ml-8 mb-2">Estimated Time: {day.estimated_time}</p>
            <div className="ml-8 pl-4 border-l-2 border-gray-600 space-y-2">
                <div>
                    <p className="font-semibold text-gray-200">Learning Activity:</p>
                    <p className="text-gray-300">{day.learning_activity}</p>
                </div>
                <div>
                    <p className="font-semibold text-gray-200">Practice Task:</p>
                    <p className="text-gray-300">{day.practice_task}</p>
                </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LearningPathView;
import React, { useState, useMemo } from 'react';
import useLocalStorage from '../hooks/useLocalStorage';
import { SharedLink, User } from '../types';
import Modal from './Modal';

interface LinkManagerProps {
  user: User;
}

const LinkManager: React.FC<LinkManagerProps> = ({ user }) => {
  const [links, setLinks] = useLocalStorage<SharedLink[]>('shared-links', []);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentLink, setCurrentLink] = useState<SharedLink | null>(null);
  const [formData, setFormData] = useState({ title: '', url: '', description: '' });
  const [formError, setFormError] = useState('');

  const handleAddLink = () => {
    setCurrentLink(null);
    setFormData({ title: '', url: '', description: '' });
    setFormError('');
    setIsModalOpen(true);
  };

  const handleEditLink = (link: SharedLink) => {
    setCurrentLink(link);
    setFormData({ title: link.title, url: link.url, description: link.description || '' });
    setFormError('');
    setIsModalOpen(true);
  };

  const handleDeleteLink = (linkId: string) => {
    if (window.confirm('Are you sure you want to delete this link?')) {
      setLinks(links.filter(l => l.id !== linkId));
    }
  };
  
  const isValidUrl = (urlString: string) => {
    try {
      new URL(urlString);
      return urlString.startsWith('http://') || urlString.startsWith('https://');
    } catch (e) {
      return false;
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.title.trim() || !formData.url.trim()) {
      setFormError('Title and URL are required.');
      return;
    }
    
    if (!isValidUrl(formData.url)) {
      setFormError('Please enter a valid URL (e.g., https://example.com).');
      return;
    }

    if (currentLink) { // Editing
      setLinks(links.map(l => l.id === currentLink.id ? { ...l, title: formData.title.trim(), url: formData.url.trim(), description: formData.description.trim() } : l));
    } else { // Adding new
      const newLink: SharedLink = {
        id: `link-${Date.now()}`,
        createdBy: user.id,
        title: formData.title.trim(),
        url: formData.url.trim(),
        description: formData.description.trim()
      };
      setLinks([...links, newLink]);
    }
    setIsModalOpen(false);
  };
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
    if (formError) setFormError('');
  };

  const sortedLinks = useMemo(() => {
    return [...links].sort((a, b) => a.title.localeCompare(b.title));
  }, [links]);

  return (
    <>
      {isModalOpen && (
        <Modal title={currentLink ? 'Edit Link' : 'Add New Link'} onClose={() => setIsModalOpen(false)}>
          <form onSubmit={handleSubmit} className="p-2 space-y-4">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-300 mb-2">Link Title</label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleInputChange}
                className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white"
                placeholder="Chapter 5 - Video Lecture"
                required
                autoFocus
              />
            </div>
            <div>
              <label htmlFor="url" className="block text-sm font-medium text-gray-300 mb-2">Link URL</label>
              <input
                type="url"
                id="url"
                name="url"
                value={formData.url}
                onChange={handleInputChange}
                className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white"
                placeholder="https://www.youtube.com/watch?v=example"
                required
              />
            </div>
             <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-300 mb-2">Description (Optional)</label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white"
                placeholder="This video explains core concepts..."
              />
            </div>
            {formError && <p className="text-sm text-red-400">{formError}</p>}
            <div className="flex justify-end gap-4 pt-2">
              <button type="button" onClick={() => setIsModalOpen(false)} className="px-5 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700">Cancel</button>
              <button type="submit" className="px-5 py-2 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700">Save Link</button>
            </div>
          </form>
        </Modal>
      )}

      <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold text-indigo-400">Manage Shared Links</h2>
          <button onClick={handleAddLink} className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700">
            + Add New Link
          </button>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full text-left">
            <thead className="border-b border-gray-600">
              <tr>
                <th className="p-3">Title</th>
                <th className="p-3 hidden sm:table-cell">URL</th>
                <th className="p-3">Actions</th>
              </tr>
            </thead>
            <tbody>
              {sortedLinks.length > 0 ? sortedLinks.map(link => (
                <tr key={link.id} className="border-b border-gray-700 hover:bg-gray-700/50">
                  <td className="p-3">
                    <div className="flex flex-col">
                      <span className="font-semibold text-white">{link.title}</span>
                      {link.description && <span className="text-sm text-gray-400 hidden sm:block">{link.description}</span>}
                    </div>
                  </td>
                  <td className="p-3 text-indigo-400 hidden sm:table-cell">
                    <a href={link.url} target="_blank" rel="noopener noreferrer" className="hover:underline truncate max-w-xs block">{link.url}</a>
                  </td>
                  <td className="p-3">
                    <div className="flex gap-2">
                      <button onClick={() => handleEditLink(link)} className="p-1 text-blue-400 hover:text-blue-300" aria-label={`Edit ${link.title}`}>
                         <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"></path><path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd"></path></svg>
                      </button>
                       <button onClick={() => handleDeleteLink(link.id)} className="p-1 text-red-400 hover:text-red-300" aria-label={`Delete ${link.title}`}>
                         <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd"></path></svg>
                      </button>
                    </div>
                  </td>
                </tr>
              )) : (
                <tr>
                  <td colSpan={3} className="text-center p-8 text-gray-400">
                    No links have been added yet. Click "+ Add New Link" to start.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </>
  );
};

export default LinkManager;
import React, { useState } from 'react';
import FaceScan from './FaceScan';
import AnimatedElement from './AnimatedElement';

interface LoginScreenProps {
  onLogin: (email: string, pass: string) => void;
  onSwitchToSignup: () => void;
  onProviderLogin: (identifier: string, type: 'email' | 'mobile') => void;
  error: string | null;
  onClearError: () => void;
}

const LoginScreen: React.FC<LoginScreenProps> = ({ onLogin, onSwitchToSignup, onProviderLogin, error, onClearError }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isFaceScanVisible, setIsFaceScanVisible] = useState(false);
  const [provider, setProvider] = useState<'google' | 'microsoft' | 'mobile' | null>(null);
  const [identifier, setIdentifier] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (email && password) {
      setIsFaceScanVisible(true);
    }
  };

  const handleFaceScanSuccess = () => {
    setIsFaceScanVisible(false);
    onLogin(email, password);
  };
  
  const handleProviderSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!identifier) return;
    onProviderLogin(identifier, provider === 'mobile' ? 'mobile' : 'email');
  };

  const handleCloseProviderModal = () => {
    setProvider(null);
    setIdentifier('');
    onClearError();
  };

  const SocialButton: React.FC<{ onClick: () => void; icon: React.ReactElement; label: string }> = ({ onClick, icon, label }) => (
    <button type="button" onClick={onClick} className="w-full flex items-center justify-center gap-3 py-2.5 px-4 border border-gray-600 rounded-lg hover:bg-gray-700/50 transition-colors duration-200">
      {icon}
      <span className="text-sm font-medium text-gray-200">{label}</span>
    </button>
  );

  return (
    <>
      {isFaceScanVisible && (
        <FaceScan
          title="Login Verification"
          onClose={() => setIsFaceScanVisible(false)}
          onSuccess={handleFaceScanSuccess}
          mode="login"
          userEmail={email}
        />
      )}
      {provider && (
        <div className="fixed inset-0 bg-black bg-opacity-75 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-2xl p-8 w-full max-w-sm text-center shadow-2xl border border-gray-700">
            <h2 className="text-2xl font-bold mb-6 text-white">
              Sign in with <span className="capitalize">{provider}</span>
            </h2>
            <form onSubmit={handleProviderSubmit} className="space-y-4">
              <input
                type={provider === 'mobile' ? 'tel' : 'email'}
                value={identifier}
                onChange={(e) => setIdentifier(e.target.value)}
                placeholder={provider === 'mobile' ? 'Enter Mobile Number' : 'Enter Email Address'}
                required
                className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors"
                autoFocus
              />
              {error && <p className="text-sm text-red-400 text-center">{error}</p>}
              <div className="flex justify-center space-x-4 pt-2">
                <button
                  type="button"
                  onClick={handleCloseProviderModal}
                  className="px-6 py-2 bg-gray-600 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors"
                >
                  Sign In
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      <div className="flex items-center justify-center min-h-screen p-4">
        <AnimatedElement className="w-full max-w-md">
          <div className="p-8 space-y-6 bg-gray-800/50 backdrop-blur-sm rounded-2xl shadow-2xl border border-gray-700">
            <div className="text-center space-y-2">
                <div className="flex justify-center items-center gap-2">
                    <svg className="h-10 w-10 text-indigo-400" width="24" height="24" viewBox="0 0 24 24" strokeWidth="2" stroke="currentColor" fill="none" strokeLinecap="round" strokeLinejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0" /><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0" /><line x1="3" y1="6" x2="3" y2="19" /><line x1="12" y1="6" x2="12" y2="19" /><line x1="21" y1="6" x2="21" y2="19" /></svg>
                    <h1 className="text-3xl font-bold text-white tracking-tight">Smart Curriculum</h1>
                </div>
                <h2 className="text-2xl font-bold text-white">Welcome back</h2>
                <p className="text-gray-400">
                    Don't have an account?{' '}
                    <button onClick={onSwitchToSignup} className="font-medium text-indigo-400 hover:text-indigo-500">
                        Sign up
                    </button>
                </p>
            </div>

            <form className="space-y-4" onSubmit={handleSubmit}>
              <div>
                <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="email">Email</label>
                <input
                  id="email"
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="Email address (e.g., student@school.com)"
                  required
                  className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors"
                />
              </div>
              <div>
                <label className="text-sm font-medium text-gray-300 sr-only" htmlFor="password">Password</label>
                <input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Password (e.g., password123)"
                  required
                  className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors"
                />
              </div>
              {!provider && error && <p className="text-sm text-red-400 text-center">{error}</p>}
              <button type="submit" className="w-full px-6 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-gray-900 transition-transform transform hover:scale-105 duration-300 ease-in-out">
                Login
              </button>
            </form>

            <div className="relative">
                <div className="absolute inset-0 flex items-center"><div className="w-full border-t border-gray-600" /></div>
                <div className="relative flex justify-center text-sm"><span className="px-2 bg-gray-800 text-gray-400">Or continue with</span></div>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                <SocialButton onClick={() => setProvider('google')} icon={<svg className="w-5 h-5" viewBox="0 0 48 48"><path fill="#FFC107" d="M43.611 20.083H42V20H24v8h11.303c-1.649 4.657-6.08 8-11.303 8c-6.627 0-12-5.373-12-12s5.373-12 12-12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C12.955 4 4 12.955 4 24s8.955 20 20 20s20-8.955 20-20c0-1.341-.138-2.65-.389-3.917z"></path><path fill="#FF3D00" d="M6.306 14.691l6.571 4.819C14.655 15.108 18.961 12 24 12c3.059 0 5.842 1.154 7.961 3.039l5.657-5.657C34.046 6.053 29.268 4 24 4C16.318 4 9.656 8.337 6.306 14.691z"></path><path fill="#4CAF50" d="M24 44c5.166 0 9.86-1.977 13.409-5.192l-6.19-5.238C29.211 35.091 26.715 36 24 36c-5.222 0-9.618-3.319-11.283-7.946l-6.522 5.025C9.505 39.556 16.227 44 24 44z"></path><path fill="#1976D2" d="M43.611 20.083H42V20H24v8h11.303c-.792 2.237-2.231 4.166-4.087 5.574l6.19 5.238C42.012 36.426 44 30.865 44 24c0-1.341-.138-2.65-.389-3.917z"></path></svg>} label="Google" />
                <SocialButton onClick={() => setProvider('microsoft')} icon={<svg className="w-5 h-5 text-white" viewBox="0 0 23 23"><path fill="currentColor" d="M1 1h10v10H1V1zm11 0h10v10H12V1zM1 12h10v10H1V12zm11 0h10v10H12V12z"></path></svg>} label="Microsoft" />
                <SocialButton onClick={() => setProvider('mobile')} icon={<svg className="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path></svg>} label="Mobile" />
            </div>

          </div>
        </AnimatedElement>
      </div>
    </>
  );
};

export default LoginScreen;
import React from 'react';

interface ModalProps {
  title: string;
  onClose: () => void;
  children: React.ReactNode;
}

const Modal: React.FC<ModalProps> = ({ title, onClose, children }) => {
  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-75 backdrop-blur-sm flex items-center justify-center z-50 p-4"
      onClick={onClose}
    >
      <div 
        className="bg-gray-800 rounded-2xl p-6 w-full max-w-3xl shadow-2xl border border-gray-700 relative max-h-[90vh] flex flex-col"
        onClick={e => e.stopPropagation()} // Prevent click from closing modal
      >
        <div className="flex justify-between items-center border-b border-gray-700 pb-4 mb-4">
            <h2 className="text-2xl font-bold text-white">{title}</h2>
            <button 
                onClick={onClose}
                className="text-gray-400 hover:text-white transition-colors"
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div className="overflow-y-auto">
            {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;

import React from 'react';
import { User, Student } from '../types';
import Header from './Header';
import Chatbot from './Chatbot';
import RollAccountView from './RollAccountView';
import LearningPathView from './LearningPathView';
import PersonalizedSuggestions from './PersonalizedSuggestions';
import ProgressTracker from './ProgressTracker';

interface ParentDashboardProps {
  user: User;
  onLogout: () => void;
  childData: Student;
}

const ParentDashboard: React.FC<ParentDashboardProps> = ({ user, onLogout, childData }) => {
  const totalClasses = childData.attendance.length;
  const presentClasses = childData.attendance.filter(a => a.status === 'Present').length;
  const attendancePercentage = totalClasses > 0 ? (presentClasses / totalClasses) * 100 : 100;

  const latestAttendance = [...childData.attendance].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())[0];

  return (
    <>
      <Header user={user} onLogout={onLogout} />
      <main className="container mx-auto p-4 sm:p-6 lg:p-8">
        <h1 className="text-3xl font-bold text-white mb-2">Parent Dashboard</h1>
        <p className="text-gray-400 mb-6">Viewing academic progress for <span className="font-semibold text-white">{childData.name}</span>.</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
              <h3 className="text-lg font-semibold text-indigo-400">Overall Attendance</h3>
              <p className="text-4xl font-bold mt-2">{attendancePercentage.toFixed(1)}%</p>
              <p className="text-gray-400">{presentClasses} of {totalClasses} classes attended</p>
            </div>
             <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
              <h3 className="text-lg font-semibold text-indigo-400">Most Recent Record</h3>
              {latestAttendance ? (
                <>
                  <p className="text-2xl font-bold mt-2">
                     <span className={`font-semibold ${latestAttendance.status === 'Present' ? 'text-green-400' : 'text-red-400'}`}>
                        {latestAttendance.status}
                     </span>
                  </p>
                  <p className="text-gray-400">{new Date(latestAttendance.date).toLocaleDateString()} - {latestAttendance.subject}</p>
                </>
              ) : (
                <p className="text-gray-400 mt-2">No attendance records yet.</p>
              )}
            </div>
             <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700 flex flex-col justify-center">
              <h3 className="text-lg font-semibold text-indigo-400">Have a Question?</h3>
              <p className="text-gray-400 mt-2">Use our AI assistant to get quick answers about your child's progress or school policies.</p>
            </div>
        </div>

        <div className="my-8">
            <ProgressTracker student={childData} />
        </div>

        <div className="my-8">
          <PersonalizedSuggestions childData={childData} />
        </div>

        {childData.learningPath ? (
          <div className="my-8">
            <LearningPathView learningPath={childData.learningPath} />
          </div>
        ) : null}

        <RollAccountView attendance={childData.attendance} />

      </main>
      <Chatbot context={`User is a parent named ${user.name}, viewing data for their child, ${childData.name}.`} />
    </>
  );
};

export default ParentDashboard;
import React, { useState } from 'react';
import { Student, PerformancePrediction } from '../types';
import { predictStudentPerformance } from '../services/geminiService';
import Spinner from './Spinner';

interface PerformancePredictorProps {
  student: Student;
}

const PerformancePredictor: React.FC<PerformancePredictorProps> = ({ student }) => {
  const [prediction, setPrediction] = useState<PerformancePrediction | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handlePredict = async () => {
    setIsLoading(true);
    setError(null);
    setPrediction(null);
    const result = await predictStudentPerformance(student);
    if (result) {
      setPrediction(result);
    } else {
      setError('Could not generate a prediction. The AI service might be unavailable. Please try again later.');
    }
    setIsLoading(false);
  };

  const getConfidenceChipClass = (confidence: string) => {
    switch (confidence.toLowerCase()) {
      case 'high':
        return 'bg-green-600/50 text-green-200 border border-green-500/50';
      case 'medium':
        return 'bg-yellow-600/50 text-yellow-200 border border-yellow-500/50';
      case 'low':
        return 'bg-red-600/50 text-red-200 border border-red-500/50';
      default:
        return 'bg-gray-600/50 text-gray-200 border border-gray-500/50';
    }
  };

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h3 className="text-xl font-bold text-indigo-400 mb-4">AI Performance Prediction</h3>
      
      {isLoading ? (
        <div className="flex flex-col items-center justify-center min-h-[150px]">
          <Spinner />
          <p className="mt-4 text-gray-300">Analyzing academic data...</p>
        </div>
      ) : error ? (
        <div className="text-center text-red-400 p-4 bg-red-900/20 rounded-lg">
          <p>{error}</p>
        </div>
      ) : prediction ? (
        <div className="text-center">
            <div className="mb-4">
                <p className="text-sm text-gray-400">Predicted Exam Performance</p>
                <p className="text-4xl font-bold text-white tracking-tight my-1">{prediction.predicted_performance}</p>
                <div className="flex justify-center items-center gap-2">
                    <p className="text-sm text-gray-400">Confidence:</p>
                    <span className={`px-3 py-1 text-xs font-semibold rounded-full ${getConfidenceChipClass(prediction.confidence_score)}`}>
                        {prediction.confidence_score}
                    </span>
                </div>
            </div>
            <div className="bg-gray-900/50 p-4 rounded-lg border border-gray-700">
                <p className="text-sm font-semibold text-gray-200">Rationale:</p>
                <p className="text-gray-300 italic">"{prediction.rationale}"</p>
            </div>
             <button
              onClick={handlePredict}
              className="mt-6 px-5 py-2 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Re-analyze Performance
            </button>
        </div>
      ) : (
        <div className="text-center">
          <p className="text-gray-400 mb-4">
            Get an AI-powered forecast of your likely exam performance based on your attendance patterns and study plan.
          </p>
          <button
            onClick={handlePredict}
            className="px-6 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105"
          >
            Analyze & Predict Performance
          </button>
        </div>
      )}
    </div>
  );
};

export default PerformancePredictor;
import React, { useState } from 'react';
import { Student, ActivitySuggestion } from '../types';
import { generateActivitySuggestions } from '../services/geminiService';
import Spinner from './Spinner';
import AnimatedElement from './AnimatedElement';

interface PersonalizedSuggestionsProps {
  childData: Student;
}

const PersonalizedSuggestions: React.FC<PersonalizedSuggestionsProps> = ({ childData }) => {
  const [suggestions, setSuggestions] = useState<ActivitySuggestion[] | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    setIsLoading(true);
    setError(null);
    const result = await generateActivitySuggestions(childData);
    if (result) {
      setSuggestions(result);
    } else {
      setError('Could not generate suggestions at this time. Please try again later.');
    }
    setIsLoading(false);
  };
  
  const getCategoryIcon = (category: ActivitySuggestion['category']) => {
    switch (category) {
      case 'Online Course': return '🎓';
      case 'Workshop': return '🛠️';
      case 'Competition': return '🏆';
      case 'Project Idea': return '💡';
      case 'Reading': return '📚';
      default: return '⭐';
    }
  };

  const renderInitialState = () => (
    <div className="text-center">
      <div className="flex justify-center items-center mb-4">
        <svg className="w-12 h-12 text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" /></svg>
      </div>
      <h3 className="text-xl font-bold text-white mb-2">Unlock Your Child's Potential</h3>
      <p className="text-gray-400 mb-6 max-w-xl mx-auto">
        Get AI-powered suggestions for courses, workshops, and activities tailored to {childData.name}'s academic profile and interests.
      </p>
      <button
        onClick={handleGenerate}
        disabled={isLoading}
        className="px-6 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105"
      >
        {isLoading ? 'Analyzing...' : 'Discover Opportunities'}
      </button>
    </div>
  );

  const renderSuggestions = () => (
    <div>
      <h3 className="text-2xl font-bold text-white mb-4">AI-Powered Suggestions for {childData.name}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {suggestions?.map((item, index) => (
          <AnimatedElement key={index} delay={index * 100}>
            <div className="bg-gray-900/50 p-6 rounded-xl border border-gray-700 h-full flex flex-col interactive-card">
              <h4 className="text-lg font-bold text-white flex items-start gap-3">
                <span className="text-2xl mt-1">{getCategoryIcon(item.category)}</span>
                <div>
                  {item.title}
                  <span className="block text-xs font-normal text-indigo-400 mt-1">{item.category}</span>
                </div>
              </h4>
              <p className="text-sm text-gray-300 mt-3 flex-grow">{item.description}</p>
              <div className="mt-4 pt-4 border-t border-gray-700">
                <p className="text-sm font-semibold text-gray-200">Why this is a good fit:</p>
                <p className="text-sm text-gray-400 italic">"{item.rationale}"</p>
              </div>
            </div>
          </AnimatedElement>
        ))}
      </div>
       <div className="text-center mt-8">
            <button
              onClick={handleGenerate}
              disabled={isLoading}
              className="px-5 py-2 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors"
            >
              {isLoading ? 'Regenerating...' : 'Get New Suggestions'}
            </button>
        </div>
    </div>
  );

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      {isLoading ? (
        <div className="flex flex-col items-center justify-center min-h-[200px]">
          <Spinner />
          <p className="mt-4 text-gray-300">Finding the best activities for {childData.name}...</p>
        </div>
      ) : error ? (
        <div className="text-center text-red-400 p-4 bg-red-900/20 rounded-lg">
          <p>{error}</p>
           <button onClick={handleGenerate} className="mt-4 px-4 py-2 bg-indigo-600 rounded-lg">Try Again</button>
        </div>
      ) : suggestions ? (
        renderSuggestions()
      ) : (
        renderInitialState()
      )}
    </div>
  );
};

export default PersonalizedSuggestions;

import React, { useState, useEffect } from 'react';
import { User } from '../types';
import Spinner from './Spinner';

// Make QRCode globally available from the script tag in index.html
declare var QRCode: any;

interface QRCodeDisplayProps {
  user: User;
  location: GeolocationCoordinates;
}

const QRCodeDisplay: React.FC<QRCodeDisplayProps> = ({ user, location }) => {
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);
  const [expiresIn, setExpiresIn] = useState(60);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const studentData = {
      studentId: user.id,
      timestamp: Date.now(),
      location: {
        latitude: location.latitude,
        longitude: location.longitude,
      },
    };

    // Simulate a JWT by Base64 encoding the JSON payload
    const qrDataString = btoa(JSON.stringify(studentData));

    QRCode.toDataURL(qrDataString, { width: 256, margin: 2 })
      .then((url: string) => {
        setQrCodeUrl(url);
      })
      .catch((err: Error) => {
        console.error('QR Code generation failed:', err);
        setError('Could not generate QR code. Please try again.');
      });
  }, [user, location]);

  useEffect(() => {
    if (expiresIn <= 0) return;
    const timer = setInterval(() => {
      setExpiresIn(prev => prev - 1);
    }, 1000);
    return () => clearInterval(timer);
  }, [expiresIn]);

  return (
    <div className="flex flex-col items-center justify-center p-4">
      <h3 className="text-xl font-bold text-white mb-2">Present this QR code to the teacher</h3>
      <p className="text-gray-400 mb-4">This code is valid for a single use.</p>
      <div className="bg-white p-4 rounded-lg shadow-lg w-72 h-72 flex items-center justify-center">
        {error ? (
          <p className="text-red-500 text-center">{error}</p>
        ) : qrCodeUrl ? (
          <img src={qrCodeUrl} alt="Attendance QR Code" />
        ) : (
          <Spinner />
        )}
      </div>
      <div className="mt-4 text-center">
        {expiresIn > 0 ? (
           <p className="text-lg text-yellow-400">
             Expires in: <span className="font-bold text-2xl">{expiresIn}s</span>
           </p>
        ) : (
           <p className="text-lg font-bold text-red-500">QR Code Expired</p>
        )}
      </div>
    </div>
  );
};

export default QRCodeDisplay;

import React, { useState, useEffect, useCallback } from 'react';
import { User } from '../types';
import Spinner from './Spinner';

declare var QRCode: any;

interface QRCodeGeneratorProps {
  user: User;
}

const QR_CODE_VALIDITY_SECONDS = 60;

const QRCodeGenerator: React.FC<QRCodeGeneratorProps> = ({ user }) => {
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);
  const [expiresIn, setExpiresIn] = useState(QR_CODE_VALIDITY_SECONDS);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const generateQRCode = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    setQrCodeUrl(null);
    setExpiresIn(QR_CODE_VALIDITY_SECONDS);

    // This function waits for the QRCode library to be loaded from the external script.
    // It polls every 100ms until window.QRCode is available.
    const waitForQRCode = (): Promise<void> =>
      new Promise((resolve) => {
        const check = () => {
          if (typeof QRCode !== 'undefined') {
            resolve();
          } else {
            setTimeout(check, 100);
          }
        };
        check();
      });

    try {
      await waitForQRCode();

      const studentData = {
        studentId: user.id,
        timestamp: Date.now(),
      };
      const qrDataString = btoa(JSON.stringify(studentData));

      // QRCode.toDataURL returns a promise
      const url = await QRCode.toDataURL(qrDataString, { width: 256, margin: 2 });
      setQrCodeUrl(url);
    } catch (err) {
      console.error('QR Code generation failed:', err);
      setError('Could not generate QR code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  }, [user.id]);

  useEffect(() => {
    generateQRCode();
  }, [generateQRCode]);

  useEffect(() => {
    if (isLoading || expiresIn <= 0) return;
    const timer = setInterval(() => {
      setExpiresIn((prev) => prev - 1);
    }, 1000);
    return () => clearInterval(timer);
  }, [isLoading, expiresIn]);

  return (
    <div className="flex flex-col items-center justify-center h-full">
      <h3 className="text-xl font-bold text-white mb-2">My Attendance QR</h3>
      <p className="text-gray-400 mb-4 text-center text-sm">
        Present this to your teacher to mark attendance.
      </p>
      <div className="bg-white p-4 rounded-lg shadow-lg w-56 h-56 flex items-center justify-center">
        {error ? (
          <p className="text-red-500 text-center">{error}</p>
        ) : isLoading ? (
          <Spinner />
        ) : qrCodeUrl ? (
          <img src={qrCodeUrl} alt="Attendance QR Code" />
        ) : null}
      </div>
      <div className="mt-4 text-center h-12 flex flex-col justify-center items-center">
        {expiresIn > 0 && !isLoading ? (
          <p className="text-lg text-yellow-400">
            Expires in: <span className="font-bold text-2xl">{expiresIn}s</span>
          </p>
        ) : null}
        {expiresIn <= 0 && !isLoading && (
          <>
            <p className="text-lg font-bold text-red-500">QR Code Expired</p>
            <button
              onClick={generateQRCode}
              className="mt-2 px-4 py-1 text-sm font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700"
            >
              Regenerate
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default QRCodeGenerator;
import React, { useEffect, useRef, useState } from 'react';
import Modal from './Modal';

// Make Html5Qrcode globally available from the script tag in index.html
declare var Html5Qrcode: any;

interface QRCodeScannerProps {
  onClose: () => void;
  onScanSuccess: (studentId: string) => void;
}

const QRCodeScanner: React.FC<QRCodeScannerProps> = ({ onClose, onScanSuccess }) => {
  const scannerRef = useRef<any>(null);
  const readerRef = useRef<HTMLDivElement>(null);
  const [scanResult, setScanResult] = useState<{ type: 'error'; message: string } | null>(null);
  
  useEffect(() => {
    // This check prevents re-initializing the scanner on re-renders
    if (!readerRef.current || scannerRef.current) return;

    const html5QrCode = new Html5Qrcode(readerRef.current.id);
    scannerRef.current = html5QrCode;

    const qrCodeSuccessCallback = (decodedText: string) => {
      if(scanResult) return; // Don't process if an error is already shown

      scannerRef.current.pause();

      try {
        const decodedData = JSON.parse(atob(decodedText));
        const { studentId, timestamp } = decodedData;
        
        if (!studentId || !timestamp) {
          throw new Error("Invalid QR code data.");
        }

        const timeDiffSeconds = (Date.now() - timestamp) / 1000;
        if (timeDiffSeconds > 60) {
           setScanResult({ type: 'error', message: 'Expired QR Code. Please ask the student to generate a new one.' });
           return;
        }
        
        onScanSuccess(studentId);

      } catch (e) {
        setScanResult({ type: 'error', message: 'Invalid or unreadable QR code format.' });
      }
    };
    
    const config = { fps: 10, qrbox: { width: 250, height: 250 }, aspectRatio: 1.0 };
    
    html5QrCode.start({ facingMode: "environment" }, config, qrCodeSuccessCallback, undefined)
      .catch(() => {
         setScanResult({ type: 'error', message: 'Could not start camera. Please check permissions.'});
      });

    return () => {
      if (scannerRef.current?.isScanning) {
        scannerRef.current.stop().catch((err: any) => console.error("Failed to stop scanner", err));
        scannerRef.current = null;
      }
    };
  }, [onScanSuccess, scanResult]);

  const handleRetry = () => {
    setScanResult(null);
    scannerRef.current?.resume();
  }
  
  return (
    <Modal title="Scan Student QR Code" onClose={onClose}>
        <div className="w-full max-w-md mx-auto relative">
           <div id="qr-reader" ref={readerRef} className="w-full border-2 border-gray-600 rounded-lg overflow-hidden bg-black"></div>
           {scanResult ? (
             <div className="absolute inset-0 bg-gray-800/90 flex flex-col items-center justify-center text-center p-4">
                <svg className="w-16 h-16 text-red-500 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <p className="text-xl font-bold text-red-400">Scan Failed</p>
                <p className="text-gray-300 mt-2">{scanResult.message}</p>
                <div className="flex gap-4 mt-6">
                    <button onClick={handleRetry} className="px-6 py-2 bg-indigo-600 rounded-lg hover:bg-indigo-700">Scan Again</button>
                    <button onClick={onClose} className="px-6 py-2 bg-gray-600 rounded-lg hover:bg-gray-700">Close</button>
                </div>
            </div>
           ) : (
            <p className="text-white text-center mt-4">Point camera at student's QR code</p>
           )}
        </div>
    </Modal>
  );
};

export default QRCodeScanner;

import React from 'react';
import { AttendanceRecord } from '../types';

interface RollAccountViewProps {
  attendance: AttendanceRecord[];
}

const RollAccountView: React.FC<RollAccountViewProps> = ({ attendance }) => {
  // Sort records by date (most recent first)
  const sortedAttendance = [...attendance].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h3 className="text-2xl font-bold mb-4 text-indigo-400">Complete Attendance History</h3>
      <div className="overflow-x-auto">
        <table className="w-full text-left">
          <thead className="border-b border-gray-600">
            <tr>
              <th className="p-3 text-sm font-semibold tracking-wide">Date</th>
              <th className="p-3 text-sm font-semibold tracking-wide">Subject/Class</th>
              <th className="p-3 text-sm font-semibold tracking-wide">Teacher</th>
              <th className="p-3 text-sm font-semibold tracking-wide">Timestamp</th>
              <th className="p-3 text-sm font-semibold tracking-wide text-right">Status</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-700">
            {sortedAttendance.map((record, index) => (
              <tr key={`${record.date}-${record.subject}-${index}`} className="hover:bg-gray-700/50">
                <td className="p-3 text-sm text-gray-300 whitespace-nowrap">
                  {new Date(record.date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' })}
                </td>
                <td className="p-3 text-sm text-white whitespace-nowrap">{record.subject}</td>
                <td className="p-3 text-sm text-gray-300 whitespace-nowrap">{record.teacherName}</td>
                <td className="p-3 text-sm text-gray-300 whitespace-nowrap">{record.timestamp}</td>
                <td className="p-3 text-sm text-right whitespace-nowrap">
                  <span className={`px-3 py-1 text-xs font-semibold rounded-full ${
                    record.status === 'Present' ? 'bg-green-600/50 text-green-200' :
                    record.status === 'Absent' ? 'bg-red-600/50 text-red-200' :
                    'bg-yellow-600/50 text-yellow-200'
                  }`}>
                    {record.status}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {sortedAttendance.length === 0 && (
          <p className="text-center py-8 text-gray-400">No attendance records found.</p>
        )}
      </div>
    </div>
  );
};

export default RollAccountView;

import React from 'react';
import useLocalStorage from '../hooks/useLocalStorage';
import { SharedLink } from '../types';
import AnimatedElement from './AnimatedElement';

const SharedLinksView: React.FC = () => {
  const [links] = useLocalStorage<SharedLink[]>('shared-links', []);
  
  // Sort links alphabetically by title for a consistent view
  const sortedLinks = React.useMemo(() => {
    return [...links].sort((a, b) => a.title.localeCompare(b.title));
  }, [links]);

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h2 className="text-2xl font-bold mb-6 text-indigo-400">Important Links</h2>
      {sortedLinks.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {sortedLinks.map((link, index) => (
            <AnimatedElement key={link.id} delay={index * 100}>
              <a 
                href={link.url} 
                target="_blank" 
                rel="noopener noreferrer" 
                className="block p-4 bg-gray-900/50 rounded-lg border border-gray-700 hover:border-indigo-500 group interactive-card"
              >
                <h3 className="font-semibold text-white text-lg flex items-center gap-2">
                   <svg className="w-5 h-5 text-gray-400 group-hover:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>
                   {link.title}
                </h3>
                {link.description && <p className="text-gray-400 mt-1 text-sm">{link.description}</p>}
                <p className="text-xs text-indigo-400 mt-2 break-all opacity-70 group-hover:opacity-100 transition-opacity">
                  {link.url}
                </p>
              </a>
            </AnimatedElement>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 text-gray-400">
            <svg className="w-16 h-16 mx-auto text-gray-600 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path></svg>
            <h3 className="text-xl font-semibold">No Links Available</h3>
            <p className="mt-1">Your teacher has not shared any important links yet.</p>
        </div>
      )}
    </div>
  );
};

export default SharedLinksView;

import React from 'react';

const Spinner: React.FC = () => {
  return (
    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  );
};

export default Spinner;

import React, { useMemo } from 'react';
import { Student } from '../types';

interface StudentAccessManagerProps {
  students: Student[];
  setStudents: (students: Student[]) => void;
}

const StudentAccessManager: React.FC<StudentAccessManagerProps> = ({ students, setStudents }) => {
  
  const studentDataWithStats = useMemo(() => {
    return students.map(student => {
      const totalClasses = student.attendance.length;
      const presentClasses = student.attendance.filter(a => a.status === 'Present').length;
      const attendancePercentage = totalClasses > 0 ? (presentClasses / totalClasses) * 100 : 100;
      const hasActivePass = student.temporaryAccessExpires && student.temporaryAccessExpires > Date.now();
      return {
        ...student,
        attendancePercentage,
        hasActivePass,
      };
    }).sort((a,b) => a.name.localeCompare(b.name));
  }, [students]);

  const handleBehaviourChange = (studentId: string, newStatus: 'Good' | 'Needs Improvement') => {
    setStudents(students.map(s => s.id === studentId ? { ...s, behaviourStatus: newStatus } : s));
  };

  const handleGrantTemporaryAccess = (studentId: string) => {
    const expires = Date.now() + 24 * 60 * 60 * 1000; // 24 hours from now
    setStudents(students.map(s =>
      s.id === studentId ? { ...s, temporaryAccessExpires: expires } : s
    ));
  };
  
  const handleToggleAccess = (studentId: string) => {
    const student = studentDataWithStats.find(s => s.id === studentId);
    if (!student) return;

    if (student.isAccessBlocked) {
      // Unblocking a student is a full reset action
      setStudents(students.map(s => 
        s.id === studentId ? { 
          ...s, 
          isAccessBlocked: false, 
          blockReason: null, 
          behaviourStatus: 'Good',
          temporaryAccessExpires: undefined, // Also clear any temporary pass
        } : s
      ));
    } else {
      // Manually blocking a student. The reason is always related to behavior.
      // The system will add the 'Attendance' flag automatically if relevant.
      const isLowAttendance = student.attendancePercentage < 75;
      const newReason = isLowAttendance ? 'Attendance & Behaviour' : 'Behaviour Issue';
      
      setStudents(students.map(s => 
        s.id === studentId ? { 
          ...s, 
          isAccessBlocked: true, 
          blockReason: newReason,
          behaviourStatus: 'Needs Improvement' // Forcibly set behavior to needs improvement on manual block
        } : s
      ));
    }
  };
  
  const getAccessStatusChip = (student: typeof studentDataWithStats[0]) => {
      if (student.hasActivePass) {
          return (
              <span className="px-3 py-1 text-xs font-semibold rounded-full bg-purple-600/50 text-purple-200">
                  Temp. Access
              </span>
          );
      }
      return (
          <span className={`px-3 py-1 text-xs font-semibold rounded-full ${
            student.isAccessBlocked 
              ? 'bg-red-600/50 text-red-200' 
              : 'bg-green-600/50 text-green-200'
          }`}>
            {student.isAccessBlocked ? 'Blocked' : 'Active'}
          </span>
      );
  };

  return (
    <div className="bg-gray-800/50 p-6 rounded-xl border border-gray-700">
      <h2 className="text-xl font-semibold mb-4 text-indigo-400">Manage Student Access</h2>
      <p className="text-sm text-gray-400 mb-6">
        Monitor student attendance and behavior. For blocked students, you can grant a temporary 24-hour pass as a fallback for technical issues.
      </p>
      <div className="overflow-x-auto">
        <table className="w-full text-left align-middle">
          <thead className="border-b border-gray-600">
            <tr>
              <th className="p-3">Name</th>
              <th className="p-3">Attendance %</th>
              <th className="p-3">Behaviour Status</th>
              <th className="p-3">Access Status</th>
              <th className="p-3">Reason for Block</th>
              <th className="p-3">Actions</th>
            </tr>
          </thead>
          <tbody>
            {studentDataWithStats.map(student => (
              <tr key={student.id} className="border-b border-gray-700 hover:bg-gray-700/50 transition-colors">
                <td className="p-3">
                  <div className="font-medium text-white">{student.name}</div>
                  <div className="text-xs text-gray-400">{student.rollNumber}</div>
                </td>
                <td className={`p-3 font-bold text-lg ${student.attendancePercentage < 75 ? 'text-red-400' : 'text-green-400'}`}>
                  {student.attendancePercentage.toFixed(1)}%
                </td>
                <td className="p-3">
                   <select
                      value={student.behaviourStatus}
                      onChange={(e) => handleBehaviourChange(student.id, e.target.value as 'Good' | 'Needs Improvement')}
                      className={`w-40 appearance-none text-center text-xs font-semibold rounded-full px-2 py-1 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 transition-colors ${
                        student.behaviourStatus === 'Good' 
                          ? 'bg-blue-600/50 text-blue-200 border border-blue-500/50'
                          : 'bg-yellow-600/50 text-yellow-200 border border-yellow-500/50'
                      }`}
                    >
                      <option className="bg-gray-700 text-white" value="Good">Good</option>
                      <option className="bg-gray-700 text-white" value="Needs Improvement">Needs Improvement</option>
                    </select>
                </td>
                <td className="p-3">
                  {getAccessStatusChip(student)}
                </td>
                <td className="p-3 text-sm text-gray-300">
                  {student.blockReason || '—'}
                </td>
                <td className="p-3">
                  <div className="flex gap-2">
                    <button
                      onClick={() => handleToggleAccess(student.id)}
                      className={`px-4 py-1.5 w-24 text-sm font-semibold text-white rounded-lg transition-colors ${
                        student.isAccessBlocked
                          ? 'bg-green-600 hover:bg-green-700'
                          : 'bg-red-600 hover:bg-red-700'
                      }`}
                    >
                      {student.isAccessBlocked ? 'Unblock' : 'Block'}
                    </button>
                    {student.isAccessBlocked && (
                       <button
                        onClick={() => handleGrantTemporaryAccess(student.id)}
                        disabled={student.hasActivePass}
                        className="px-4 py-1.5 text-sm font-semibold text-white rounded-lg transition-colors bg-purple-600 hover:bg-purple-700 disabled:bg-gray-500 disabled:cursor-not-allowed"
                        title={student.hasActivePass ? "Student already has an active pass" : "Grant 24-hour access"}
                      >
                        Grant Pass
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default StudentAccessManager;
import React from 'react';
import { Student, LearningPath } from '../types';
import Modal from './Modal';
import RollAccountView from './RollAccountView';
import LearningPathGenerator from './LearningPathGenerator';
import LearningPathView from './LearningPathView';

interface StudentDetailsViewProps {
  student: Student;
  onClose: () => void;
  onPlanGenerated: (learningPath: LearningPath) => void;
}

const StudentDetailsView: React.FC<StudentDetailsViewProps> = ({ student, onClose, onPlanGenerated }) => {
  const totalClasses = student.attendance.length;
  const presentClasses = student.attendance.filter(a => a.status === 'Present').length;
  const attendancePercentage = totalClasses > 0 ? (presentClasses / totalClasses) * 100 : 100;

  return (
    <Modal title={`Student Details: ${student.name}`} onClose={onClose}>
      <div className="space-y-6 p-2">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center md:text-left">
            <div className="bg-gray-900/50 p-4 rounded-lg">
                <p className="text-sm text-gray-400">Roll Number</p>
                <p className="text-lg font-semibold text-white">{student.rollNumber}</p>
            </div>
            <div className="bg-gray-900/50 p-4 rounded-lg">
                <p className="text-sm text-gray-400">Department</p>
                <p className="text-lg font-semibold text-white">{student.department}</p>
            </div>
            <div className="bg-gray-900/50 p-4 rounded-lg">
                <p className="text-sm text-gray-400">Attendance</p>
                <p className="text-lg font-semibold text-white">{attendancePercentage.toFixed(1)}% ({presentClasses}/{totalClasses})</p>
            </div>
        </div>
        
        {student.learningPath && <LearningPathView learningPath={student.learningPath} />}
        
        <LearningPathGenerator student={student} onPlanGenerated={onPlanGenerated} />
        
        <RollAccountView attendance={student.attendance} />

      </div>
    </Modal>
  );
};

export default StudentDetailsView;

import React, { useState, useEffect } from 'react';
import { Student, LearningPath } from '../types';
import { generateStudentInitiatedLearningPath } from '../services/geminiService';
import Spinner from './Spinner';
import LearningPathView from './LearningPathView';

interface StudentLearningPlannerProps {
  student: Student;
  onPlanGenerated: (learningPath: LearningPath) => void;
}

type PlannerState = 'welcome' | 'form' | 'generating' | 'viewing' | 'error';

const StudentLearningPlanner: React.FC<StudentLearningPlannerProps> = ({ student, onPlanGenerated }) => {
  const [plannerState, setPlannerState] = useState<PlannerState>('welcome');
  const [error, setError] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    subjects: '',
    examDates: '',
    studyHours: '',
    strengthsWeaknesses: '',
    goal: '',
  });

  useEffect(() => {
    if (student.learningPath) {
      setPlannerState('viewing');
    } else {
      setPlannerState('welcome');
    }
  }, [student.learningPath]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleGeneratePlan = async (e: React.FormEvent) => {
    e.preventDefault();
    setPlannerState('generating');
    setError(null);

    const path = await generateStudentInitiatedLearningPath(formData, student.name);

    if (path) {
      onPlanGenerated(path);
      // The useEffect will switch the state to 'viewing'
    } else {
      setError('Sorry, I couldn\'t generate a plan right now. Please check your inputs or try again later.');
      setPlannerState('error');
    }
  };
  
  const renderWelcome = () => (
    <div className="text-center py-12 bg-gray-800/50 rounded-xl border border-gray-700">
      <h3 className="text-3xl font-bold text-white">Hey {student.name}! 👋</h3>
      <p className="text-gray-300 mt-4 max-w-2xl mx-auto">
        I'm your Personal AI Study Partner. I can create a perfect study plan based on your subjects and goals to make learning easier and more interesting. Ready to start?
      </p>
      <button 
        onClick={() => setPlannerState('form')}
        className="mt-8 px-8 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105"
      >
        Create My Plan
      </button>
    </div>
  );
  
  const renderForm = () => (
     <div className="bg-gray-800/50 p-6 sm:p-8 rounded-xl border border-gray-700">
        <h3 className="text-2xl font-bold text-center mb-6 text-white">Tell me a little about your studies</h3>
        <form onSubmit={handleGeneratePlan} className="space-y-6 max-w-2xl mx-auto">
           <div>
              <label htmlFor="subjects" className="block text-sm font-medium text-gray-300 mb-2">What subjects are you studying?</label>
              <input type="text" name="subjects" id="subjects" value={formData.subjects} onChange={handleInputChange} required placeholder="e.g., Physics, Maths, History" className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
           </div>
           <div>
              <label htmlFor="examDates" className="block text-sm font-medium text-gray-300 mb-2">When are your next exams?</label>
              <input type="text" name="examDates" id="examDates" value={formData.examDates} onChange={handleInputChange} required placeholder="e.g., Next month, or specific dates" className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
           </div>
           <div>
              <label htmlFor="studyHours" className="block text-sm font-medium text-gray-300 mb-2">How many hours can you study per day?</label>
              <input type="text" name="studyHours" id="studyHours" value={formData.studyHours} onChange={handleInputChange} required placeholder="e.g., 3 hours on weekdays, 5 on weekends" className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
           </div>
           <div>
              <label htmlFor="strengthsWeaknesses" className="block text-sm font-medium text-gray-300 mb-2">What are your strongest and weakest subjects/topics?</label>
              <textarea name="strengthsWeaknesses" id="strengthsWeaknesses" value={formData.strengthsWeaknesses} onChange={handleInputChange} required rows={3} placeholder="e.g., Strong in Algebra, weak in Geometry" className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white"></textarea>
           </div>
           <div>
              <label htmlFor="goal" className="block text-sm font-medium text-gray-300 mb-2">What is your main goal?</label>
              <input type="text" name="goal" id="goal" value={formData.goal} onChange={handleInputChange} required placeholder="e.g., Score 90% in finals, clear concepts" className="w-full px-4 py-2 bg-gray-700/50 border border-gray-600 rounded-lg text-white" />
           </div>
           <div className="text-center pt-4">
               <button type="submit" className="px-8 py-3 text-lg font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-700">
                  ✨ Generate My Personalized Plan
               </button>
           </div>
        </form>
     </div>
  );
  
  const renderGenerating = () => (
    <div className="text-center py-24 bg-gray-800/50 rounded-xl border border-gray-700 flex flex-col items-center justify-center">
        <Spinner />
        <h3 className="text-2xl font-bold text-white mt-6">Crafting your personalized plan...</h3>
        <p className="text-gray-300 mt-2">Hang tight, this might take a moment!</p>
    </div>
  );

  const renderViewing = () => (
     <div>
        {student.learningPath && <LearningPathView learningPath={student.learningPath} />}
        <div className="mt-6 text-center">
            <button 
              onClick={() => { setFormData({subjects: '', examDates: '', studyHours: '', strengthsWeaknesses: '', goal: ''}); setPlannerState('form'); }}
              className="px-6 py-2 font-semibold text-indigo-400 bg-gray-900/50 border border-indigo-500/50 rounded-lg hover:bg-gray-700/50"
            >
              Create a New Plan
            </button>
        </div>
     </div>
  );
  
  const renderError = () => (
     <div className="text-center py-12 bg-red-900/30 rounded-xl border border-red-500/50">
      <h3 className="text-2xl font-bold text-red-300">Oh no! Something went wrong.</h3>
      <p className="text-red-300/80 mt-2 max-w-md mx-auto">{error}</p>
      <button 
        onClick={() => setPlannerState('form')}
        className="mt-6 px-6 py-2 bg-indigo-600 rounded-lg hover:bg-indigo-700"
      >
        Try Again
      </button>
    </div>
  );

  switch (plannerState) {
    case 'welcome':
      return renderWelcome();
    case 'form':
      return renderForm();
    case 'generating':
      return renderGenerating();
    case 'viewing':
      return renderViewing();
    case 'error':
        return renderError();
    default:
      return renderWelcome();
  }
};

export default StudentLearningPlanner;

import React, { useState, useEffect } from 'react';
import Modal from './Modal';

interface IdleTimeoutModalProps {
  isOpen: boolean;
  onClose: () => void; // Called when "Stay Logged In" is clicked
  onLogout: () => void;
  countdownTime: number; // in milliseconds
}

const IdleTimeoutModal: React.FC<IdleTimeoutModalProps> = ({ isOpen, onClose, onLogout, countdownTime }) => {
  const [countdown, setCountdown] = useState(Math.ceil(countdownTime / 1000));

  useEffect(() => {
    if (isOpen) {
      setCountdown(Math.ceil(countdownTime / 1000));
      const interval = setInterval(() => {
        setCountdown(prev => (prev > 0 ? prev - 1 : 0));
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isOpen, countdownTime]);

  if (!isOpen) {
    return null;
  }

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-75 backdrop-blur-sm flex items-center justify-center z-50 p-4"
    >
      <div 
        className="bg-gray-800 rounded-2xl p-8 w-full max-w-md text-center shadow-2xl border border-yellow-500/50"
        role="dialog"
        aria-modal="true"
        aria-labelledby="idle-modal-title"
      >
        <h2 id="idle-modal-title" className="text-2xl font-bold text-yellow-300 mb-4">Are you still there?</h2>
        <p className="text-gray-300 mb-2">For your security, you will be logged out due to inactivity.</p>
        <p className="text-4xl font-bold text-white my-4">{countdown}</p>
        <p className="text-gray-400 mb-6">seconds remaining</p>
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <button
            onClick={onLogout}
            className="px-6 py-2 bg-gray-600 text-white font-semibold rounded-lg hover:bg-gray-700"
          >
            Logout Now
          </button>
          <button
            onClick={onClose}
            className="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700"
            autoFocus
          >
            Stay Logged In
          </button>
        </div>
      </div>
    </div>
  );
};

export default IdleTimeoutModal;
